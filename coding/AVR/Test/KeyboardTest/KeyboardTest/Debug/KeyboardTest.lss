
KeyboardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800190  00800190  00000694  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001012  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c5  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000665  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006db  00000000  00000000  00002aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003195  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  9e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <KPsetup>:
// Rows: PC0, PC1, PD6, PD7
// Columns: PC2, PC3, PB2, PB0

void KPsetup() {
	// Set rows as output (PC0, PC1, PD6, PD7)
	DDRC |= (1 << PC0) | (1 << PC1);   // Set PC0, PC1 as output
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD6) | (1 << PD7);   // Set PD6, PD7 as output
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 6c       	ori	r24, 0xC0	; 192
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Set columns as input with pull-up (PC2, PC3, PB2, PB0)
	DDRC &= ~((1 << PC2) | (1 << PC3)); // Set PC2, PC3 as input
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	83 7f       	andi	r24, 0xF3	; 243
  b6:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~((1 << PB2) | (1 << PB0)); // Set PB2, PB0 as input
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8a 7f       	andi	r24, 0xFA	; 250
  bc:	84 b9       	out	0x04, r24	; 4
	
	PORTC |= (1 << PC2) | (1 << PC3);   // Enable pull-up on PC2, PC3
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	8c 60       	ori	r24, 0x0C	; 12
  c2:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << PB2) | (1 << PB0);   // Enable pull-up on PB2, PB0
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	85 60       	ori	r24, 0x05	; 5
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	08 95       	ret

000000cc <scanKeypad>:
}

char scanKeypad() {
	// Loop through each row
	for (uint8_t row = 0; row < ROWS; row++) {
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	4a c0       	rjmp	.+148    	; 0x164 <scanKeypad+0x98>
		// Set all rows to high
		PORTC |= (1 << PC0) | (1 << PC1);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	88 b9       	out	0x08, r24	; 8
		PORTD |= (1 << PD6) | (1 << PD7);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	80 6c       	ori	r24, 0xC0	; 192
  da:	8b b9       	out	0x0b, r24	; 11

		// Set current row to low
		switch(row) {
  dc:	e1 30       	cpi	r30, 0x01	; 1
  de:	51 f0       	breq	.+20     	; 0xf4 <scanKeypad+0x28>
  e0:	28 f0       	brcs	.+10     	; 0xec <scanKeypad+0x20>
  e2:	e2 30       	cpi	r30, 0x02	; 2
  e4:	59 f0       	breq	.+22     	; 0xfc <scanKeypad+0x30>
  e6:	e3 30       	cpi	r30, 0x03	; 3
  e8:	69 f0       	breq	.+26     	; 0x104 <scanKeypad+0x38>
  ea:	0f c0       	rjmp	.+30     	; 0x10a <scanKeypad+0x3e>
			case 0: PORTD &= ~(1 << PD7); break;
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	0b c0       	rjmp	.+22     	; 0x10a <scanKeypad+0x3e>
			case 1: PORTD &= ~(1 << PD6); break;
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8f 7b       	andi	r24, 0xBF	; 191
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	07 c0       	rjmp	.+14     	; 0x10a <scanKeypad+0x3e>
			case 2: PORTC &= ~(1 << PC0); break;
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	88 b9       	out	0x08, r24	; 8
 102:	03 c0       	rjmp	.+6      	; 0x10a <scanKeypad+0x3e>
			case 3: PORTC &= ~(1 << PC1); break;
 104:	88 b1       	in	r24, 0x08	; 8
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	88 b9       	out	0x08, r24	; 8
		}

		// Check each column for a pressed key
		if (!(PINC & (1 << PC2))) return hexaKeys[row][0]; // Column 1
 10a:	32 99       	sbic	0x06, 2	; 6
 10c:	09 c0       	rjmp	.+18     	; 0x120 <scanKeypad+0x54>
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	08 95       	ret
		if (!(PINC & (1 << PC3))) return hexaKeys[row][1]; // Column 2
 120:	33 99       	sbic	0x06, 3	; 6
 122:	09 c0       	rjmp	.+18     	; 0x136 <scanKeypad+0x6a>
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	08 95       	ret
		if (!(PINB & (1 << PB2))) return hexaKeys[row][2]; // Column 3
 136:	1a 99       	sbic	0x03, 2	; 3
 138:	09 c0       	rjmp	.+18     	; 0x14c <scanKeypad+0x80>
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e0 50       	subi	r30, 0x00	; 0
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	82 81       	ldd	r24, Z+2	; 0x02
 14a:	08 95       	ret
		if (!(PINB & (1 << PB0))) return hexaKeys[row][3]; // Column 4
 14c:	18 99       	sbic	0x03, 0	; 3
 14e:	09 c0       	rjmp	.+18     	; 0x162 <scanKeypad+0x96>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	83 81       	ldd	r24, Z+3	; 0x03
 160:	08 95       	ret
	PORTB |= (1 << PB2) | (1 << PB0);   // Enable pull-up on PB2, PB0
}

char scanKeypad() {
	// Loop through each row
	for (uint8_t row = 0; row < ROWS; row++) {
 162:	ef 5f       	subi	r30, 0xFF	; 255
 164:	e4 30       	cpi	r30, 0x04	; 4
 166:	08 f4       	brcc	.+2      	; 0x16a <scanKeypad+0x9e>
 168:	b3 cf       	rjmp	.-154    	; 0xd0 <scanKeypad+0x4>
		if (!(PINC & (1 << PC3))) return hexaKeys[row][1]; // Column 2
		if (!(PINB & (1 << PB2))) return hexaKeys[row][2]; // Column 3
		if (!(PINB & (1 << PB0))) return hexaKeys[row][3]; // Column 4
	}

	return '\0'; // No key pressed
 16a:	80 e0       	ldi	r24, 0x00	; 0
}
 16c:	08 95       	ret

0000016e <flip_bits>:

unsigned char flip_bits(unsigned char value) {
	value = ((value & 0xF0) >> 4) | ((value & 0x0F) << 4);  // Swap nibbles
 16e:	28 2f       	mov	r18, r24
 170:	22 95       	swap	r18
 172:	2f 70       	andi	r18, 0x0F	; 15
 174:	30 e1       	ldi	r19, 0x10	; 16
 176:	83 9f       	mul	r24, r19
 178:	c0 01       	movw	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	92 2f       	mov	r25, r18
 17e:	98 2b       	or	r25, r24
	value = ((value & 0xCC) >> 2) | ((value & 0x33) << 2);  // Swap pairs
 180:	29 2f       	mov	r18, r25
 182:	2c 7c       	andi	r18, 0xCC	; 204
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	35 95       	asr	r19
 18c:	27 95       	ror	r18
 18e:	93 73       	andi	r25, 0x33	; 51
 190:	89 2f       	mov	r24, r25
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	82 2b       	or	r24, r18
	value = ((value & 0xAA) >> 1) | ((value & 0x55) << 1);  // Swap individual bits
 19e:	28 2f       	mov	r18, r24
 1a0:	2a 7a       	andi	r18, 0xAA	; 170
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	35 95       	asr	r19
 1a6:	27 95       	ror	r18
 1a8:	85 75       	andi	r24, 0x55	; 85
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
	return value;
}
 1b0:	82 2b       	or	r24, r18
 1b2:	08 95       	ret

000001b4 <lcd_cmd>:

void lcd_cmd(unsigned char cmd){
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
	PORTD = flip_bits((cmd & 0xF0)>>2);
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	0e 94 b7 00 	call	0x16e	; 0x16e <flip_bits>
 1c8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<EN);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	85 b9       	out	0x05, r24	; 5
	PORTB &= (~(1<<RS));
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	8f 7e       	andi	r24, 0xEF	; 239
 1d4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9f e1       	ldi	r25, 0x1F	; 31
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_cmd+0x26>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_cmd+0x2c>
 1e0:	00 00       	nop
	_delay_ms(2);
	PORTB &= (~(1<<EN));
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	87 7f       	andi	r24, 0xF7	; 247
 1e6:	85 b9       	out	0x05, r24	; 5

	PORTD = flip_bits(((cmd << 4) & 0xF0)>>2);
 1e8:	20 e1       	ldi	r18, 0x10	; 16
 1ea:	c2 9f       	mul	r28, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	99 27       	eor	r25, r25
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	0e 94 b7 00 	call	0x16e	; 0x16e <flip_bits>
 1fe:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<EN);
 200:	85 b1       	in	r24, 0x05	; 5
 202:	88 60       	ori	r24, 0x08	; 8
 204:	85 b9       	out	0x05, r24	; 5
	PORTB &= (~(1<<RS));
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8f 7e       	andi	r24, 0xEF	; 239
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	8f e3       	ldi	r24, 0x3F	; 63
 20e:	9f e1       	ldi	r25, 0x1F	; 31
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_cmd+0x5c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_cmd+0x62>
 216:	00 00       	nop
	_delay_ms(2);
	PORTB &= (~(1<<EN));
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	87 7f       	andi	r24, 0xF7	; 247
 21c:	85 b9       	out	0x05, r24	; 5
}
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <lcd_data>:

void lcd_data(unsigned char data){
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
	PORTD = flip_bits((data & 0xF0)>>2);
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	0e 94 b7 00 	call	0x16e	; 0x16e <flip_bits>
 236:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<EN);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<RS);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	80 61       	ori	r24, 0x10	; 16
 242:	85 b9       	out	0x05, r24	; 5
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_data+0x26>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_data+0x2c>
 24e:	00 00       	nop
	_delay_ms(2);
	PORTB &= (~(1<<EN));
 250:	85 b1       	in	r24, 0x05	; 5
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	85 b9       	out	0x05, r24	; 5

	PORTD = flip_bits(((data << 4) & 0xF0)>>2);
 256:	20 e1       	ldi	r18, 0x10	; 16
 258:	c2 9f       	mul	r28, r18
 25a:	c0 01       	movw	r24, r0
 25c:	11 24       	eor	r1, r1
 25e:	99 27       	eor	r25, r25
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <flip_bits>
 26c:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<EN);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	88 60       	ori	r24, 0x08	; 8
 272:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<RS);
 274:	85 b1       	in	r24, 0x05	; 5
 276:	80 61       	ori	r24, 0x10	; 16
 278:	85 b9       	out	0x05, r24	; 5
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_data+0x5c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_data+0x62>
 284:	00 00       	nop
	_delay_ms(2);
	PORTB &= (~(1<<EN));
 286:	85 b1       	in	r24, 0x05	; 5
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	85 b9       	out	0x05, r24	; 5
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_string>:

void lcd_string(const unsigned char *str, unsigned char length){
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	8c 01       	movw	r16, r24
 29a:	d6 2f       	mov	r29, r22
	for (unsigned char i = 0; i < length; i++){
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <lcd_string+0x1e>
		lcd_data(str[i]);
 2a0:	f8 01       	movw	r30, r16
 2a2:	ec 0f       	add	r30, r28
 2a4:	f1 1d       	adc	r31, r1
 2a6:	80 81       	ld	r24, Z
 2a8:	0e 94 11 01 	call	0x222	; 0x222 <lcd_data>
	_delay_ms(2);
	PORTB &= (~(1<<EN));
}

void lcd_string(const unsigned char *str, unsigned char length){
	for (unsigned char i = 0; i < length; i++){
 2ac:	cf 5f       	subi	r28, 0xFF	; 255
 2ae:	cd 17       	cp	r28, r29
 2b0:	b8 f3       	brcs	.-18     	; 0x2a0 <lcd_string+0x10>
		lcd_data(str[i]);
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	08 95       	ret

000002bc <lcd_init>:
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	89 ef       	ldi	r24, 0xF9	; 249
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <lcd_init+0x6>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x10>
 2cc:	00 00       	nop

void lcd_init() {
	_delay_ms(20);           // Wait for LCD to power up
	
	// Initialization in 4-bit mode
	lcd_cmd(0x02);           // Initialize in 4-bit mode
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_cmd(0x28);           // 4-bit mode, 2 lines, 5x7 dots
 2d4:	88 e2       	ldi	r24, 0x28	; 40
 2d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_cmd(0x06);           // Entry mode set: increment automatically
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_cmd(0x0C);           // Display on, cursor off
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_cmd(0x01);           // Clear display
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
 2ec:	8f e3       	ldi	r24, 0x3F	; 63
 2ee:	9f e1       	ldi	r25, 0x1F	; 31
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_init+0x34>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_init+0x3a>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <fabricSelect>:
	_delay_ms(2);            // Clear display requires a delay
}

void fabricSelect(char customKey){
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
	// Clear LCD display and print character
	fabric = customKey;
 2fe:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <fabric>
	lcd_cmd(0x01);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_cmd(0x80);
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	switch (customKey){
 30e:	c2 34       	cpi	r28, 0x42	; 66
 310:	79 f0       	breq	.+30     	; 0x330 <fabricSelect+0x36>
 312:	18 f4       	brcc	.+6      	; 0x31a <fabricSelect+0x20>
 314:	c1 34       	cpi	r28, 0x41	; 65
 316:	31 f0       	breq	.+12     	; 0x324 <fabricSelect+0x2a>
 318:	1c c0       	rjmp	.+56     	; 0x352 <fabricSelect+0x58>
 31a:	c3 34       	cpi	r28, 0x43	; 67
 31c:	79 f0       	breq	.+30     	; 0x33c <fabricSelect+0x42>
 31e:	c4 34       	cpi	r28, 0x44	; 68
 320:	99 f0       	breq	.+38     	; 0x348 <fabricSelect+0x4e>
 322:	17 c0       	rjmp	.+46     	; 0x352 <fabricSelect+0x58>
		case 'A':
		lcd_string((const unsigned char *)"Cotton", 6);
 324:	66 e0       	ldi	r22, 0x06	; 6
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
		break;
 32e:	11 c0       	rjmp	.+34     	; 0x352 <fabricSelect+0x58>
		case 'B':
		lcd_string((const unsigned char *)"Silk", 4);
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	87 e1       	ldi	r24, 0x17	; 23
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
		break;
 33a:	0b c0       	rjmp	.+22     	; 0x352 <fabricSelect+0x58>
		case 'C':
		lcd_string((const unsigned char *)"Linen", 5);
 33c:	65 e0       	ldi	r22, 0x05	; 5
 33e:	8c e1       	ldi	r24, 0x1C	; 28
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
		break;
 346:	05 c0       	rjmp	.+10     	; 0x352 <fabricSelect+0x58>
		case 'D':
		lcd_string((const unsigned char *)"Other", 5);
 348:	65 e0       	ldi	r22, 0x05	; 5
 34a:	81 e5       	ldi	r24, 0x51	; 81
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
		break;
	}
}
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <main>:


int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	8c 63       	ori	r24, 0x3C	; 60
 364:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB3)|(1<<DDB4);
 366:	84 b1       	in	r24, 0x04	; 4
 368:	88 61       	ori	r24, 0x18	; 24
 36a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB1);
 36c:	84 b1       	in	r24, 0x04	; 4
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	84 b9       	out	0x04, r24	; 4

	// Set Timer1 to Fast PWM mode, 8-bit
	TCCR1A |= (1 << WGM10);   // Fast PWM, 8-bit (WGM10 set to 1)
 372:	e0 e8       	ldi	r30, 0x80	; 128
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A1);  // Clear OC1A on Compare Match, set at BOTTOM (non-inverting mode)
 37c:	80 81       	ld	r24, Z
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	80 83       	st	Z, r24
	
	// Set Timer1 prescaler to 64 (assuming 16 MHz clock)
	TCCR1B |= (1 << WGM12);   // Fast PWM, 8-bit (WGM12 set to 1)
 382:	e1 e8       	ldi	r30, 0x81	; 129
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11) | (1 << CS10);  // Prescaler set to 64
 38c:	80 81       	ld	r24, Z
 38e:	83 60       	ori	r24, 0x03	; 3
 390:	80 83       	st	Z, r24
	
	// Set duty cycle to 90 (out of 255)
	OCR1A = 90;
 392:	8a e5       	ldi	r24, 0x5A	; 90
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 39a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	lcd_init();
 39e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_init>

	lcd_cmd(0x80);           // Set cursor to the first line
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
	lcd_string((const unsigned char *)"  PrecisionRoll   ",17);  // Print string on the LCD
 3a8:	61 e1       	ldi	r22, 0x11	; 17
 3aa:	82 e2       	ldi	r24, 0x22	; 34
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	37 ea       	ldi	r19, 0xA7	; 167
 3b6:	81 e6       	ldi	r24, 0x61	; 97
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	30 40       	sbci	r19, 0x00	; 0
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x62>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x6c>
 3c2:	00 00       	nop
	_delay_ms(2000);         // Delay for 2 seconds
	lcd_cmd(0x01);           // Clear display
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	9f e1       	ldi	r25, 0x1F	; 31
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x78>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x7e>
 3d4:	00 00       	nop
	_delay_ms(2);            // Clear display requires a delay

	KPsetup();
 3d6:	0e 94 53 00 	call	0xa6	; 0xa6 <KPsetup>

	while (1)
	{
		strcpy(length, "");
 3da:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
		selected = false;
 3de:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <selected>
		lcd_cmd(0x80);
 3e2:	80 e8       	ldi	r24, 0x80	; 128
 3e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
		lcd_string((const unsigned char *)"A:Cotton B:Silk ", 17);
 3e8:	61 e1       	ldi	r22, 0x11	; 17
 3ea:	85 e3       	ldi	r24, 0x35	; 53
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
		lcd_cmd(0xC0);
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
		lcd_string((const unsigned char *)"C:Linen  D:Other", 17);
 3f8:	61 e1       	ldi	r22, 0x11	; 17
 3fa:	86 e4       	ldi	r24, 0x46	; 70
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>

		while (1) {
			char key = scanKeypad();
 402:	0e 94 66 00 	call	0xcc	; 0xcc <scanKeypad>
 406:	18 2f       	mov	r17, r24
			if (key != '\0') {
 408:	88 23       	and	r24, r24
 40a:	81 f0       	breq	.+32     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				if (key == 'A' || key == 'B' || key == 'C' || key == 'D'){
 40c:	8f eb       	ldi	r24, 0xBF	; 191
 40e:	81 0f       	add	r24, r17
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	30 f4       	brcc	.+12     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
					fabricSelect(key);
 414:	81 2f       	mov	r24, r17
 416:	0e 94 7d 01 	call	0x2fa	; 0x2fa <fabricSelect>
					selected = true;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <selected>
				}
				if ((key == '#') && (selected)) {
 420:	13 32       	cpi	r17, 0x23	; 35
 422:	21 f4       	brne	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 424:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <selected>
 428:	81 11       	cpse	r24, r1
 42a:	0a c0       	rjmp	.+20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	21 ee       	ldi	r18, 0xE1	; 225
 430:	34 e0       	ldi	r19, 0x04	; 4
 432:	91 50       	subi	r25, 0x01	; 1
 434:	20 40       	sbci	r18, 0x00	; 0
 436:	30 40       	sbci	r19, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	e1 cf       	rjmp	.-62     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	91 ee       	ldi	r25, 0xE1	; 225
 444:	24 e0       	ldi	r18, 0x04	; 4
 446:	81 50       	subi	r24, 0x01	; 1
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	20 40       	sbci	r18, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
				}
			}
			_delay_ms(100);
		}
		_delay_ms(100);
		lcd_cmd(0xC0);
 452:	80 ec       	ldi	r24, 0xC0	; 192
 454:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
		lcd_string((const unsigned char *)"Length: ", 8);
 458:	68 e0       	ldi	r22, 0x08	; 8
 45a:	87 e5       	ldi	r24, 0x57	; 87
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>

		while (1) {
			char lenkey = scanKeypad();
 462:	0e 94 66 00 	call	0xcc	; 0xcc <scanKeypad>
 466:	89 83       	std	Y+1, r24	; 0x01
			if (lenkey != '\0') {
 468:	88 23       	and	r24, r24
 46a:	51 f1       	breq	.+84     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
				if (lenkey == '*') {
 46c:	8a 32       	cpi	r24, 0x2A	; 42
 46e:	99 f4       	brne	.+38     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
					strcpy(length, "");
 470:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
					lcd_cmd(0xC0);
 474:	80 ec       	ldi	r24, 0xC0	; 192
 476:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
					lcd_string((const unsigned char *)"                ", 16);
 47a:	60 e1       	ldi	r22, 0x10	; 16
 47c:	80 e6       	ldi	r24, 0x60	; 96
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
					lcd_cmd(0xC0);
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
					lcd_string((const unsigned char *)"Length: ", 8);
 48a:	68 e0       	ldi	r22, 0x08	; 8
 48c:	87 e5       	ldi	r24, 0x57	; 87
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
 494:	15 c0       	rjmp	.+42     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
					} else if ((lenkey == '#') && (strcmp(length, "") != 0)) {
 496:	83 32       	cpi	r24, 0x23	; 35
 498:	21 f4       	brne	.+8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49a:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__data_end>
 49e:	91 11       	cpse	r25, r1
 4a0:	19 c0       	rjmp	.+50     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
					break;
					} else if ((lenkey >= '0' && lenkey <= '9')) {
 4a2:	90 ed       	ldi	r25, 0xD0	; 208
 4a4:	98 0f       	add	r25, r24
 4a6:	9a 30       	cpi	r25, 0x0A	; 10
 4a8:	58 f4       	brcc	.+22     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
					lcd_data(lenkey);
 4aa:	0e 94 11 01 	call	0x222	; 0x222 <lcd_data>
					strncat(length, &lenkey, 1);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 5f       	subi	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	80 e9       	ldi	r24, 0x90	; 144
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 a6 02 	call	0x54c	; 0x54c <strncat>
 4c0:	3f ef       	ldi	r19, 0xFF	; 255
 4c2:	83 ec       	ldi	r24, 0xC3	; 195
 4c4:	99 e0       	ldi	r25, 0x09	; 9
 4c6:	31 50       	subi	r19, 0x01	; 1
 4c8:	80 40       	sbci	r24, 0x00	; 0
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
				}
			}
			_delay_ms(200);
		}
 4d2:	c7 cf       	rjmp	.-114    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>

		lcd_cmd(0x01);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
 4da:	8f e3       	ldi	r24, 0x3F	; 63
 4dc:	9f e1       	ldi	r25, 0x1F	; 31
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
		_delay_ms(2);

		lcd_cmd(0x80);
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
		lcd_string((const unsigned char *)"   Rolling...  ", 15);
 4ec:	6f e0       	ldi	r22, 0x0F	; 15
 4ee:	81 e7       	ldi	r24, 0x71	; 113
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
 4f6:	9a ea       	ldi	r25, 0xAA	; 170
 4f8:	26 ee       	ldi	r18, 0xE6	; 230
 4fa:	36 e9       	ldi	r19, 0x96	; 150
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	91 50       	subi	r25, 0x01	; 1
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	30 40       	sbci	r19, 0x00	; 0
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	d9 f7       	brne	.-10     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 508:	00 00       	nop
		
		
		
		//Code for serial communication

		lcd_cmd(0x01);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
 510:	8f e3       	ldi	r24, 0x3F	; 63
 512:	9f e1       	ldi	r25, 0x1F	; 31
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 51a:	00 00       	nop
		_delay_ms(2);
		lcd_string((const unsigned char *)"    Finished.", 13);
 51c:	6d e0       	ldi	r22, 0x0D	; 13
 51e:	81 e8       	ldi	r24, 0x81	; 129
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 48 01 	call	0x290	; 0x290 <lcd_string>
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	23 e2       	ldi	r18, 0x23	; 35
 52a:	34 ef       	ldi	r19, 0xF4	; 244
 52c:	91 50       	subi	r25, 0x01	; 1
 52e:	20 40       	sbci	r18, 0x00	; 0
 530:	30 40       	sbci	r19, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 536:	00 00       	nop
		_delay_ms(5000);
		lcd_cmd(0x01);
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_cmd>
 53e:	8f e3       	ldi	r24, 0x3F	; 63
 540:	9f e1       	ldi	r25, 0x1F	; 31
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 548:	00 00       	nop
 54a:	47 cf       	rjmp	.-370    	; 0x3da <main+0x84>

0000054c <strncat>:
 54c:	fb 01       	movw	r30, r22
 54e:	dc 01       	movw	r26, r24
 550:	0d 90       	ld	r0, X+
 552:	00 20       	and	r0, r0
 554:	e9 f7       	brne	.-6      	; 0x550 <strncat+0x4>
 556:	11 97       	sbiw	r26, 0x01	; 1
 558:	41 50       	subi	r20, 0x01	; 1
 55a:	50 40       	sbci	r21, 0x00	; 0
 55c:	28 f0       	brcs	.+10     	; 0x568 <strncat+0x1c>
 55e:	01 90       	ld	r0, Z+
 560:	00 20       	and	r0, r0
 562:	0d 92       	st	X+, r0
 564:	c9 f7       	brne	.-14     	; 0x558 <strncat+0xc>
 566:	08 95       	ret
 568:	1c 92       	st	X, r1
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
