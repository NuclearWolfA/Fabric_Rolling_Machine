
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae9  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000839  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bb  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034e  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  88:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
}

unsigned char USART_Available(void)
{
	return (UCSR0A & (1 << RXC0));  // Return non-zero if data is available
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	4a 9b       	sbis	0x09, 2	; 9
  a6:	11 c0       	rjmp	.+34     	; 0xca <__vector_1+0x3a>
  a8:	4b 99       	sbic	0x09, 3	; 9
  aa:	0f c0       	rjmp	.+30     	; 0xca <__vector_1+0x3a>
  ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
  b0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <master_count+0x1>
  ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <master_count>
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	4a 9b       	sbis	0x09, 2	; 9
  cc:	11 c0       	rjmp	.+34     	; 0xf0 <__vector_1+0x60>
  ce:	4b 9b       	sbis	0x09, 3	; 9
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <__vector_1+0x60>
  d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
  d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <master_count+0x1>
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <master_count>
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <UART_Init>:
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 106:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 61       	ori	r24, 0x18	; 24
 112:	80 83       	st	Z, r24
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 70       	andi	r24, 0x07	; 7
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	86 60       	ori	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <setup>:
 126:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_Init>
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	8a b9       	out	0x0a, r24	; 10
 136:	84 b1       	in	r24, 0x04	; 4
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	84 b9       	out	0x04, r24	; 4
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8a b9       	out	0x0a, r24	; 10
 142:	85 b1       	in	r24, 0x05	; 5
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	85 b9       	out	0x05, r24	; 5
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	e9 e6       	ldi	r30, 0x69	; 105
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	83 60       	ori	r24, 0x03	; 3
 156:	80 83       	st	Z, r24
 158:	8d b3       	in	r24, 0x1d	; 29
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	8d bb       	out	0x1d, r24	; 29
 15e:	78 94       	sei
 160:	08 95       	ret

00000162 <UART_TxChar>:

void UART_TxChar(char ch)
{
	// Wait for the transmit buffer to be empty
	while (!(UCSR0A & (1 << UDRE0)));
 162:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 166:	95 ff       	sbrs	r25, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <UART_TxChar>

	// Put the data into the buffer, sending the data
	UDR0 = ch;
 16a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16e:	08 95       	ret

00000170 <UART_TxNumber>:
}

void UART_TxNumber(int number) {
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	27 97       	sbiw	r28, 0x07	; 7
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 188:	4a e0       	ldi	r20, 0x0A	; 10
 18a:	be 01       	movw	r22, r28
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	0e 94 42 01 	call	0x284	; 0x284 <__itoa_ncheck>
	char buffer[7]; // Enough to hold the string representation of the number
	itoa(number, buffer, 10); // Convert the integer to a string in base 10

	// Transmit each character in the string
	for (int i = 0; buffer[i] != '\0'; i++) {
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <UART_TxNumber+0x32>
		UART_TxChar(buffer[i]);
 19a:	0e 94 b1 00 	call	0x162	; 0x162 <UART_TxChar>
void UART_TxNumber(int number) {
	char buffer[7]; // Enough to hold the string representation of the number
	itoa(number, buffer, 10); // Convert the integer to a string in base 10

	// Transmit each character in the string
	for (int i = 0; buffer[i] != '\0'; i++) {
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e0 0f       	add	r30, r16
 1ac:	f1 1f       	adc	r31, r17
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f3 cf       	rjmp	.-26     	; 0x19a <UART_TxNumber+0x2a>
		UART_TxChar(buffer[i]);
	}
	
	// Optionally, send a delimiter like newline or space to mark the end of the number
	UART_TxChar('\n'); // Sends a newline character
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	0e 94 b1 00 	call	0x162	; 0x162 <UART_TxChar>
}
 1ba:	27 96       	adiw	r28, 0x07	; 7
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <loop>:
	
	sei(); // Enable global interrupts
}

void loop() {
	while(master_count < 1000 && master_count > -1000) {
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <loop+0x50>
		PORTB |= (1 << CW_LED);  // Turn on CW_LED
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	83 ed       	ldi	r24, 0xD3	; 211
 1dc:	90 e3       	ldi	r25, 0x30	; 48
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <loop+0xe>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <loop+0x18>
 1e8:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~(1 << CW_LED);  // Turn off CW_LED
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <loop+0x26>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <loop+0x30>
 200:	00 00       	nop
		_delay_ms(1000);

		// Transmit the master_count
		UART_TxNumber(master_count);
 202:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
 206:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
 20a:	0e 94 b8 00 	call	0x170	; 0x170 <UART_TxNumber>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	81 ee       	ldi	r24, 0xE1	; 225
 212:	94 e0       	ldi	r25, 0x04	; 4
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <loop+0x44>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <loop+0x4e>
 21e:	00 00       	nop
	
	sei(); // Enable global interrupts
}

void loop() {
	while(master_count < 1000 && master_count > -1000) {
 220:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
 224:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
 228:	88 3e       	cpi	r24, 0xE8	; 232
 22a:	93 40       	sbci	r25, 0x03	; 3
 22c:	3c f4       	brge	.+14     	; 0x23c <loop+0x6c>
 22e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
 232:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
 236:	89 31       	cpi	r24, 0x19	; 25
 238:	9c 4f       	sbci	r25, 0xFC	; 252
 23a:	5c f6       	brge	.-106    	; 0x1d2 <loop+0x2>
		UART_TxNumber(master_count);
		_delay_ms(100);
	}
	
	// Ensure the LED toggles after the loop ends
	PORTB |= (1 << CW_LED); // Turn on CW_LED
 23c:	85 b1       	in	r24, 0x05	; 5
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	85 b9       	out	0x05, r24	; 5
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	91 ee       	ldi	r25, 0xE1	; 225
 246:	24 e0       	ldi	r18, 0x04	; 4
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <loop+0x78>
 250:	00 c0       	rjmp	.+0      	; 0x252 <loop+0x82>
 252:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1 << CW_LED); // Turn off CW_LED
 254:	85 b1       	in	r24, 0x05	; 5
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	85 b9       	out	0x05, r24	; 5
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	91 ee       	ldi	r25, 0xE1	; 225
 25e:	24 e0       	ldi	r18, 0x04	; 4
 260:	81 50       	subi	r24, 0x01	; 1
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <loop+0x90>
 268:	00 c0       	rjmp	.+0      	; 0x26a <loop+0x9a>
 26a:	00 00       	nop
	_delay_ms(100);
	
	// Optionally transmit the final value of master_count as a character
	UART_TxNumber(master_count);
 26c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
 270:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
 274:	0e 94 b8 00 	call	0x170	; 0x170 <UART_TxNumber>
 278:	08 95       	ret

0000027a <main>:
		PORTD |= (1 << CCW_LED);
	}
}

int main(void) {
	setup();
 27a:	0e 94 93 00 	call	0x126	; 0x126 <setup>
	while (1) {
		loop();
 27e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <loop>
 282:	fd cf       	rjmp	.-6      	; 0x27e <main+0x4>

00000284 <__itoa_ncheck>:
 284:	bb 27       	eor	r27, r27
 286:	4a 30       	cpi	r20, 0x0A	; 10
 288:	31 f4       	brne	.+12     	; 0x296 <__itoa_ncheck+0x12>
 28a:	99 23       	and	r25, r25
 28c:	22 f4       	brpl	.+8      	; 0x296 <__itoa_ncheck+0x12>
 28e:	bd e2       	ldi	r27, 0x2D	; 45
 290:	90 95       	com	r25
 292:	81 95       	neg	r24
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__utoa_common>

0000029a <__utoa_ncheck>:
 29a:	bb 27       	eor	r27, r27

0000029c <__utoa_common>:
 29c:	fb 01       	movw	r30, r22
 29e:	55 27       	eor	r21, r21
 2a0:	aa 27       	eor	r26, r26
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	aa 1f       	adc	r26, r26
 2a8:	a4 17       	cp	r26, r20
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__utoa_common+0x14>
 2ac:	a4 1b       	sub	r26, r20
 2ae:	83 95       	inc	r24
 2b0:	50 51       	subi	r21, 0x10	; 16
 2b2:	b9 f7       	brne	.-18     	; 0x2a2 <__utoa_common+0x6>
 2b4:	a0 5d       	subi	r26, 0xD0	; 208
 2b6:	aa 33       	cpi	r26, 0x3A	; 58
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <__utoa_common+0x20>
 2ba:	a9 5d       	subi	r26, 0xD9	; 217
 2bc:	a1 93       	st	Z+, r26
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	79 f7       	brne	.-34     	; 0x2a0 <__utoa_common+0x4>
 2c2:	b1 11       	cpse	r27, r1
 2c4:	b1 93       	st	Z+, r27
 2c6:	11 92       	st	Z+, r1
 2c8:	cb 01       	movw	r24, r22
 2ca:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <strrev>

000002ce <strrev>:
 2ce:	dc 01       	movw	r26, r24
 2d0:	fc 01       	movw	r30, r24
 2d2:	67 2f       	mov	r22, r23
 2d4:	71 91       	ld	r23, Z+
 2d6:	77 23       	and	r23, r23
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <strrev+0x4>
 2da:	32 97       	sbiw	r30, 0x02	; 2
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <strrev+0x18>
 2de:	7c 91       	ld	r23, X
 2e0:	6d 93       	st	X+, r22
 2e2:	70 83       	st	Z, r23
 2e4:	62 91       	ld	r22, -Z
 2e6:	ae 17       	cp	r26, r30
 2e8:	bf 07       	cpc	r27, r31
 2ea:	c8 f3       	brcs	.-14     	; 0x2de <strrev+0x10>
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
