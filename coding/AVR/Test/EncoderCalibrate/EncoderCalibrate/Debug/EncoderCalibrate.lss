
EncoderCalibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000932  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  88:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
	return UDR0;
}

unsigned char USART_Available(void) {
	return (UCSR0A & (1 << RXC0));  // Return non-zero if data is available
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	4a 9b       	sbis	0x09, 2	; 9
  a6:	0b c0       	rjmp	.+22     	; 0xbe <__vector_1+0x2e>
  a8:	4b 99       	sbic	0x09, 3	; 9
  aa:	09 c0       	rjmp	.+18     	; 0xbe <__vector_1+0x2e>
  ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
  b0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <master_count+0x1>
  ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <master_count>
  be:	4a 9b       	sbis	0x09, 2	; 9
  c0:	0b c0       	rjmp	.+22     	; 0xd8 <__vector_1+0x48>
  c2:	4b 9b       	sbis	0x09, 3	; 9
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <__vector_1+0x48>
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
  ca:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <master_count+0x1>
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <master_count>
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <UART_Init>:
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 61       	ori	r24, 0x18	; 24
  fa:	80 83       	st	Z, r24
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	87 70       	andi	r24, 0x07	; 7
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	86 60       	ori	r24, 0x06	; 6
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <UART_TxChar>:

void UART_TxChar(char ch) {
	// Wait for the transmit buffer to be empty
	while (!(UCSR0A & (1 << UDRE0)));
 10e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 112:	95 ff       	sbrs	r25, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <UART_TxChar>

	// Put the data into the buffer, sending the data
	UDR0 = ch;
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11a:	08 95       	ret

0000011c <UART_TxNumber>:
}

void UART_TxNumber(int number) {
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	27 97       	sbiw	r28, 0x07	; 7
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__itoa_ncheck>
	char buffer[7];  // Enough to hold the string representation of the number
	itoa(number, buffer, 10);  // Convert the integer to a string in base 10

	// Transmit each character in the string
	for (int i = 0; buffer[i] != '\0'; i++) {
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	04 c0       	rjmp	.+8      	; 0x14e <UART_TxNumber+0x32>
		UART_TxChar(buffer[i]);
 146:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
void UART_TxNumber(int number) {
	char buffer[7];  // Enough to hold the string representation of the number
	itoa(number, buffer, 10);  // Convert the integer to a string in base 10

	// Transmit each character in the string
	for (int i = 0; buffer[i] != '\0'; i++) {
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ec 0f       	add	r30, r28
 154:	fd 1f       	adc	r31, r29
 156:	e0 0f       	add	r30, r16
 158:	f1 1f       	adc	r31, r17
 15a:	80 81       	ld	r24, Z
 15c:	81 11       	cpse	r24, r1
 15e:	f3 cf       	rjmp	.-26     	; 0x146 <UART_TxNumber+0x2a>
		UART_TxChar(buffer[i]);
	}

	// Optionally, send a delimiter like newline or space to mark the end of the number
	UART_TxChar('\n');  // Sends a newline character
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
}
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:
int USART_ReceiveNumber(void);


int main(void)
{
	UART_Init();
 17c:	0e 94 73 00 	call	0xe6	; 0xe6 <UART_Init>
	
	// Set CHA and CHB as inputs
	DDRD &= ~(1 << CHA);  // Set PD2 as input
 180:	8a b1       	in	r24, 0x0a	; 10
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << CHB);  // Set PD3 as input
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	8a b9       	out	0x0a, r24	; 10
	
	// Enable external interrupt INT0 on rising edge
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Set INT0 to trigger on rising edge
 18c:	e9 e6       	ldi	r30, 0x69	; 105
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	83 60       	ori	r24, 0x03	; 3
 194:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);  // Enable INT0 interrupt
 196:	8d b3       	in	r24, 0x1d	; 29
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	8d bb       	out	0x1d, r24	; 29

	sei();  // Enable global interrupts
 19c:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		UART_TxNumber(master_count);
 19e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <master_count>
 1a2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <master_count+0x1>
 1a6:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_TxNumber>
 1aa:	f9 cf       	rjmp	.-14     	; 0x19e <main+0x22>

000001ac <__itoa_ncheck>:
 1ac:	bb 27       	eor	r27, r27
 1ae:	4a 30       	cpi	r20, 0x0A	; 10
 1b0:	31 f4       	brne	.+12     	; 0x1be <__itoa_ncheck+0x12>
 1b2:	99 23       	and	r25, r25
 1b4:	22 f4       	brpl	.+8      	; 0x1be <__itoa_ncheck+0x12>
 1b6:	bd e2       	ldi	r27, 0x2D	; 45
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__utoa_common>

000001c2 <__utoa_ncheck>:
 1c2:	bb 27       	eor	r27, r27

000001c4 <__utoa_common>:
 1c4:	fb 01       	movw	r30, r22
 1c6:	55 27       	eor	r21, r21
 1c8:	aa 27       	eor	r26, r26
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	a4 17       	cp	r26, r20
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__utoa_common+0x14>
 1d4:	a4 1b       	sub	r26, r20
 1d6:	83 95       	inc	r24
 1d8:	50 51       	subi	r21, 0x10	; 16
 1da:	b9 f7       	brne	.-18     	; 0x1ca <__utoa_common+0x6>
 1dc:	a0 5d       	subi	r26, 0xD0	; 208
 1de:	aa 33       	cpi	r26, 0x3A	; 58
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <__utoa_common+0x20>
 1e2:	a9 5d       	subi	r26, 0xD9	; 217
 1e4:	a1 93       	st	Z+, r26
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	79 f7       	brne	.-34     	; 0x1c8 <__utoa_common+0x4>
 1ea:	b1 11       	cpse	r27, r1
 1ec:	b1 93       	st	Z+, r27
 1ee:	11 92       	st	Z+, r1
 1f0:	cb 01       	movw	r24, r22
 1f2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <strrev>

000001f6 <strrev>:
 1f6:	dc 01       	movw	r26, r24
 1f8:	fc 01       	movw	r30, r24
 1fa:	67 2f       	mov	r22, r23
 1fc:	71 91       	ld	r23, Z+
 1fe:	77 23       	and	r23, r23
 200:	e1 f7       	brne	.-8      	; 0x1fa <strrev+0x4>
 202:	32 97       	sbiw	r30, 0x02	; 2
 204:	04 c0       	rjmp	.+8      	; 0x20e <strrev+0x18>
 206:	7c 91       	ld	r23, X
 208:	6d 93       	st	X+, r22
 20a:	70 83       	st	Z, r23
 20c:	62 91       	ld	r22, -Z
 20e:	ae 17       	cp	r26, r30
 210:	bf 07       	cpc	r27, r31
 212:	c8 f3       	brcs	.-14     	; 0x206 <strrev+0x10>
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
