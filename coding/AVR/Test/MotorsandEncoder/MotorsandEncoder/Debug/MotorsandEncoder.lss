
MotorsandEncoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  000007aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b76  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053c  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050a  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 32 02 	call	0x464	; 0x464 <main>
  9e:	0c 94 87 03 	jmp	0x70e	; 0x70e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
		UART_TxChar(buffer[i]);
	}

	// Optionally, send a delimiter like newline or space to mark the end of the number
	UART_TxChar('\n');  // Sends a newline character
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <INTFLAG1>
  ba:	4a 9b       	sbis	0x09, 2	; 9
  bc:	11 c0       	rjmp	.+34     	; 0xe0 <__vector_1+0x3a>
  be:	4b 99       	sbic	0x09, 3	; 9
  c0:	0f c0       	rjmp	.+30     	; 0xe0 <__vector_1+0x3a>
  c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <master_count>
  c6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <master_count+0x1>
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <master_count+0x1>
  d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <master_count>
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	85 b9       	out	0x05, r24	; 5
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	4a 9b       	sbis	0x09, 2	; 9
  e2:	11 c0       	rjmp	.+34     	; 0x106 <__vector_1+0x60>
  e4:	4b 9b       	sbis	0x09, 3	; 9
  e6:	0f c0       	rjmp	.+30     	; 0x106 <__vector_1+0x60>
  e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <master_count>
  ec:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <master_count+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <master_count+0x1>
  f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <master_count>
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	85 b9       	out	0x05, r24	; 5
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	80 68       	ori	r24, 0x80	; 128
 104:	8b b9       	out	0x0b, r24	; 11
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <UART_Init>:
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 120:	e1 ec       	ldi	r30, 0xC1	; 193
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 61       	ori	r24, 0x18	; 24
 128:	80 83       	st	Z, r24
 12a:	e2 ec       	ldi	r30, 0xC2	; 194
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	87 70       	andi	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	86 60       	ori	r24, 0x06	; 6
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <USART_Receive>:
 13c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 140:	88 23       	and	r24, r24
 142:	e4 f7       	brge	.-8      	; 0x13c <USART_Receive>
 144:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 148:	08 95       	ret

0000014a <USART_Available>:
 14a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	80 78       	andi	r24, 0x80	; 128
 150:	08 95       	ret

00000152 <UART_TxChar>:
 152:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	95 ff       	sbrs	r25, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <UART_TxChar>
 15a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret

00000160 <USART_ReceiveNumber>:

int USART_ReceiveNumber(void) {
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	27 97       	sbiw	r28, 0x07	; 7
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];  // Buffer to store the received string
	int i = 0;
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
	char received_char;

	// Receive characters until the delimiter is found
	while (1) {
		received_char = USART_Receive();
 17c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Receive>

		if (received_char == '\n' || received_char == '\r') {
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	11 f0       	breq	.+4      	; 0x188 <USART_ReceiveNumber+0x28>
 184:	8d 30       	cpi	r24, 0x0D	; 13
 186:	61 f4       	brne	.+24     	; 0x1a0 <USART_ReceiveNumber+0x40>
			// Delimiter found, end of number
			buffer[i] = '\0';  // Null-terminate the string
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e0 0f       	add	r30, r16
 192:	f1 1f       	adc	r31, r17
 194:	10 82       	st	Z, r1
			i++;
		}
	}

	// Convert the received string back to an integer
	return atoi(buffer);  // Converts the string to an integer
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <atoi>
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <USART_ReceiveNumber+0x54>
			// Delimiter found, end of number
			buffer[i] = '\0';  // Null-terminate the string
			break;
			} else {
			// Store the received character
			buffer[i] = received_char;
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e0 0f       	add	r30, r16
 1aa:	f1 1f       	adc	r31, r17
 1ac:	80 83       	st	Z, r24
			i++;
 1ae:	0f 5f       	subi	r16, 0xFF	; 255
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
 1b2:	e4 cf       	rjmp	.-56     	; 0x17c <USART_ReceiveNumber+0x1c>

	// Convert the received string back to an integer
	return atoi(buffer);  // Converts the string to an integer
}
 1b4:	27 96       	adiw	r28, 0x07	; 7
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <initTimer1>:

void initTimer1(void) {
	// Initialize Timer1 to count microseconds
	TCCR1A = 0;
 1ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 1ce:	e1 e8       	ldi	r30, 0x81	; 129
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	10 82       	st	Z, r1

	// Set the prescaler to 64
	TCCR1B |= (1 << CS11) | (1 << CS10);
 1d4:	80 81       	ld	r24, Z
 1d6:	83 60       	ori	r24, 0x03	; 3
 1d8:	80 83       	st	Z, r24

	// Enable Timer1 overflow interrupt
	TIMSK1 |= (1 << TOIE1);
 1da:	ef e6       	ldi	r30, 0x6F	; 111
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 83       	st	Z, r24

	// Initialize the counter
	TCNT1 = 0;
 1e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// Enable global interrupts
	sei();
 1ec:	78 94       	sei
 1ee:	08 95       	ret

000001f0 <setup>:
void initTimer1(void);
unsigned long micros(void);
void rotateMotors(void);

void setup() {
	UART_Init();
 1f0:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Init>
	initTimer1();
 1f4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initTimer1>

	// Set CHA and CHB as inputs
	DDRD &= ~(1 << CHA);  // Set PD2 as input
 1f8:	8a b1       	in	r24, 0x0a	; 10
 1fa:	8b 7f       	andi	r24, 0xFB	; 251
 1fc:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << CHB);  // Set PD3 as input
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	87 7f       	andi	r24, 0xF7	; 247
 202:	8a b9       	out	0x0a, r24	; 10

	// Set the direction pins as outputs
	DDRD |= (1 << dirPin1) | (1 << stepPin1) | (1 << dirPin2) | (1 << stepPin2);
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	80 6f       	ori	r24, 0xF0	; 240
 208:	8a b9       	out	0x0a, r24	; 10

	// Set initial direction of motors
	PORTD &= ~(1 << dirPin1);  // Set dirPin1 HIGH
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	8f 7e       	andi	r24, 0xEF	; 239
 20e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << dirPin2);  // Set dirPin2 HIGH
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	80 64       	ori	r24, 0x40	; 64
 214:	8b b9       	out	0x0b, r24	; 11

	// Enable external interrupt INT0 on rising edge
	EICRA |= (1 << ISC01) | (1 << ISC00);  // Set INT0 to trigger on rising edge
 216:	e9 e6       	ldi	r30, 0x69	; 105
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	83 60       	ori	r24, 0x03	; 3
 21e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);  // Enable INT0 interrupt
 220:	8d b3       	in	r24, 0x1d	; 29
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8d bb       	out	0x1d, r24	; 29

	sei();  // Enable global interrupts
 226:	78 94       	sei
 228:	08 95       	ret

0000022a <__vector_13>:

	// Enable global interrupts
	sei();
}

ISR(TIMER1_OVF_vect) {
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
	// Increment the overflow counter
	timer1_overflow_count++;
 23c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer1_overflow_count>
 240:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer1_overflow_count+0x1>
 244:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer1_overflow_count+0x2>
 248:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer1_overflow_count+0x3>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	a1 1d       	adc	r26, r1
 250:	b1 1d       	adc	r27, r1
 252:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer1_overflow_count>
 256:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <timer1_overflow_count+0x1>
 25a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <timer1_overflow_count+0x2>
 25e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <timer1_overflow_count+0x3>
}
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <micros>:

unsigned long micros(void) {
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;  // Save the global interrupt flag
 27c:	2f b7       	in	r18, 0x3f	; 63
	cli();  // Disable interrupts temporarily
 27e:	f8 94       	cli

	// Calculate microseconds based on timer value and overflow count
	m = timer1_overflow_count;
 280:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer1_overflow_count>
 284:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer1_overflow_count+0x1>
 288:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer1_overflow_count+0x2>
 28c:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer1_overflow_count+0x3>
	m = (m << 16) | TCNT1;
 290:	bc 01       	movw	r22, r24
 292:	55 27       	eor	r21, r21
 294:	44 27       	eor	r20, r20
 296:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 29a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 29e:	a0 e0       	ldi	r26, 0x00	; 0
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	7a 01       	movw	r14, r20
 2a4:	8b 01       	movw	r16, r22
 2a6:	e8 2a       	or	r14, r24
 2a8:	f9 2a       	or	r15, r25
 2aa:	0a 2b       	or	r16, r26
 2ac:	1b 2b       	or	r17, r27
 2ae:	c8 01       	movw	r24, r16
 2b0:	b7 01       	movw	r22, r14

	SREG = oldSREG;  // Restore the global interrupt flag
 2b2:	2f bf       	out	0x3f, r18	; 63
	return m * (64.0 / (F_CPU / 1000000.0));
 2b4:	0e 94 66 02 	call	0x4cc	; 0x4cc <__floatunsisf>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e8       	ldi	r20, 0x80	; 128
 2be:	50 e4       	ldi	r21, 0x40	; 64
 2c0:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
 2c4:	0e 94 37 02 	call	0x46e	; 0x46e <__fixunssfsi>
}
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <rotateMotors>:

void rotateMotors(void) {
 2d2:	8f 92       	push	r8
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
	const long interval1 = del1;  // Microseconds for motor 1
 2ea:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <del1>
 2ee:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <del1+0x1>
	static bool stepState1 = false;

	const long interval2 = del2;  // Microseconds for motor 2
 2f2:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f6:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	static bool stepState2 = false;

	unsigned long currentMicros1 = micros();
 2fa:	0e 94 3a 01 	call	0x274	; 0x274 <micros>
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
	unsigned long currentMicros2 = micros();
 302:	0e 94 3a 01 	call	0x274	; 0x274 <micros>
 306:	ab 01       	movw	r20, r22
 308:	bc 01       	movw	r22, r24

	// Handle motor 1
	if (currentMicros1 - previousMicros1 >= interval1) {
 30a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <previousMicros1>
 30e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <previousMicros1+0x1>
 312:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <previousMicros1+0x2>
 316:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <previousMicros1+0x3>
 31a:	46 01       	movw	r8, r12
 31c:	57 01       	movw	r10, r14
 31e:	88 1a       	sub	r8, r24
 320:	99 0a       	sbc	r9, r25
 322:	aa 0a       	sbc	r10, r26
 324:	bb 0a       	sbc	r11, r27
 326:	c8 01       	movw	r24, r16
 328:	11 0f       	add	r17, r17
 32a:	aa 0b       	sbc	r26, r26
 32c:	bb 0b       	sbc	r27, r27
 32e:	88 16       	cp	r8, r24
 330:	99 06       	cpc	r9, r25
 332:	aa 06       	cpc	r10, r26
 334:	bb 06       	cpc	r11, r27
 336:	b8 f0       	brcs	.+46     	; 0x366 <rotateMotors+0x94>
		previousMicros1 = currentMicros1;
 338:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <previousMicros1>
 33c:	d0 92 0e 01 	sts	0x010E, r13	; 0x80010e <previousMicros1+0x1>
 340:	e0 92 0f 01 	sts	0x010F, r14	; 0x80010f <previousMicros1+0x2>
 344:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <previousMicros1+0x3>

		stepState1 = !stepState1;
 348:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stepState1.1985>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	89 27       	eor	r24, r25
 350:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <stepState1.1985>

		if (stepState1) {
 354:	88 23       	and	r24, r24
 356:	21 f0       	breq	.+8      	; 0x360 <rotateMotors+0x8e>
			PORTD |= (1 << stepPin1);  // Set stepPin1 HIGH
 358:	8b b1       	in	r24, 0x0b	; 11
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	8b b9       	out	0x0b, r24	; 11
 35e:	03 c0       	rjmp	.+6      	; 0x366 <rotateMotors+0x94>
			} else {
			PORTD &= ~(1 << stepPin1);  // Set stepPin1 LOW
 360:	8b b1       	in	r24, 0x0b	; 11
 362:	8f 7d       	andi	r24, 0xDF	; 223
 364:	8b b9       	out	0x0b, r24	; 11
		}
	}

	// Handle motor 2
	if (currentMicros2 - previousMicros2 >= interval2) {
 366:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <previousMicros2>
 36a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <previousMicros2+0x1>
 36e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <previousMicros2+0x2>
 372:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <previousMicros2+0x3>
 376:	8a 01       	movw	r16, r20
 378:	9b 01       	movw	r18, r22
 37a:	08 1b       	sub	r16, r24
 37c:	19 0b       	sbc	r17, r25
 37e:	2a 0b       	sbc	r18, r26
 380:	3b 0b       	sbc	r19, r27
 382:	ce 01       	movw	r24, r28
 384:	dd 0f       	add	r29, r29
 386:	aa 0b       	sbc	r26, r26
 388:	bb 0b       	sbc	r27, r27
 38a:	08 17       	cp	r16, r24
 38c:	19 07       	cpc	r17, r25
 38e:	2a 07       	cpc	r18, r26
 390:	3b 07       	cpc	r19, r27
 392:	b8 f0       	brcs	.+46     	; 0x3c2 <rotateMotors+0xf0>
		previousMicros2 = currentMicros2;
 394:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <previousMicros2>
 398:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <previousMicros2+0x1>
 39c:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <previousMicros2+0x2>
 3a0:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <previousMicros2+0x3>

		stepState2 = !stepState2;
 3a4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	89 27       	eor	r24, r25
 3ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

		if (stepState2) {
 3b0:	88 23       	and	r24, r24
 3b2:	21 f0       	breq	.+8      	; 0x3bc <rotateMotors+0xea>
			PORTD |= (1 << stepPin2);  // Set stepPin2 HIGH
 3b4:	8b b1       	in	r24, 0x0b	; 11
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	8b b9       	out	0x0b, r24	; 11
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <rotateMotors+0xf0>
			} else {
			PORTD &= ~(1 << stepPin2);  // Set stepPin2 LOW
 3bc:	8b b1       	in	r24, 0x0b	; 11
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	8b b9       	out	0x0b, r24	; 11
		}
	}
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	bf 90       	pop	r11
 3d4:	af 90       	pop	r10
 3d6:	9f 90       	pop	r9
 3d8:	8f 90       	pop	r8
 3da:	08 95       	ret

000003dc <loop>:
}

void loop() {
	

	if (USART_Available()) {
 3dc:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Available>
 3e0:	88 23       	and	r24, r24
 3e2:	c1 f0       	breq	.+48     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		// Receive fabric type
		received_fabric = USART_Receive();
 3e4:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Receive>
 3e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <received_fabric>
		char a = USART_Receive();
 3ec:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Receive>
		// Skip the space character (if you include it in the transmission)
		while (a != ' ') {
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <loop+0x1a>
			a = USART_Receive();
 3f2:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Receive>
	if (USART_Available()) {
		// Receive fabric type
		received_fabric = USART_Receive();
		char a = USART_Receive();
		// Skip the space character (if you include it in the transmission)
		while (a != ' ') {
 3f6:	80 32       	cpi	r24, 0x20	; 32
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <loop+0x16>
			a = USART_Receive();
			};
			// Receive the length
			received_length = USART_ReceiveNumber();
 3fa:	0e 94 b0 00 	call	0x160	; 0x160 <USART_ReceiveNumber>
 3fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <received_length+0x1>
 402:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <received_length>
		master_count=0;
 406:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <master_count+0x1>
 40a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <master_count>
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	}

	// Rotate motors while the absolute value of master_count is less than received_length * 100
	while (abs(master_count) < (received_length * 52 - 41)) { // value got from calibration
		rotateMotors();
 410:	0e 94 69 01 	call	0x2d2	; 0x2d2 <rotateMotors>
			received_length = USART_ReceiveNumber();
		master_count=0;
	}

	// Rotate motors while the absolute value of master_count is less than received_length * 100
	while (abs(master_count) < (received_length * 52 - 41)) { // value got from calibration
 414:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <master_count>
 418:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <master_count+0x1>
 41c:	33 23       	and	r19, r19
 41e:	1c f4       	brge	.+6      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 420:	31 95       	neg	r19
 422:	21 95       	neg	r18
 424:	31 09       	sbc	r19, r1
 426:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <received_length>
 42a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <received_length+0x1>
 42e:	64 e3       	ldi	r22, 0x34	; 52
 430:	64 9f       	mul	r22, r20
 432:	c0 01       	movw	r24, r0
 434:	65 9f       	mul	r22, r21
 436:	90 0d       	add	r25, r0
 438:	11 24       	eor	r1, r1
 43a:	89 97       	sbiw	r24, 0x29	; 41
 43c:	28 17       	cp	r18, r24
 43e:	39 07       	cpc	r19, r25
 440:	3c f3       	brlt	.-50     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		rotateMotors();
	}
	if(received_length !=0){
 442:	45 2b       	or	r20, r21
 444:	71 f0       	breq	.+28     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	UART_TxChar('A');
 446:	81 e4       	ldi	r24, 0x41	; 65
 448:	0e 94 a9 00 	call	0x152	; 0x152 <UART_TxChar>
	UART_TxChar('\n');
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 a9 00 	call	0x152	; 0x152 <UART_TxChar>
	received_length=0;
 452:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <received_length+0x1>
 456:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <received_length>
	master_count=0;
 45a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <master_count+0x1>
 45e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <master_count>
 462:	08 95       	ret

00000464 <main>:
		PORTD |= (1 << CCW_LED);
	}
}

int main(void) {
	setup();
 464:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <setup>

	while (1) {
		loop();
 468:	0e 94 ee 01 	call	0x3dc	; 0x3dc <loop>
 46c:	fd cf       	rjmp	.-6      	; 0x468 <main+0x4>

0000046e <__fixunssfsi>:
 46e:	0e 94 ab 02 	call	0x556	; 0x556 <__fp_splitA>
 472:	88 f0       	brcs	.+34     	; 0x496 <__fixunssfsi+0x28>
 474:	9f 57       	subi	r25, 0x7F	; 127
 476:	98 f0       	brcs	.+38     	; 0x49e <__fixunssfsi+0x30>
 478:	b9 2f       	mov	r27, r25
 47a:	99 27       	eor	r25, r25
 47c:	b7 51       	subi	r27, 0x17	; 23
 47e:	b0 f0       	brcs	.+44     	; 0x4ac <__fixunssfsi+0x3e>
 480:	e1 f0       	breq	.+56     	; 0x4ba <__fixunssfsi+0x4c>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	1a f0       	brmi	.+6      	; 0x492 <__fixunssfsi+0x24>
 48c:	ba 95       	dec	r27
 48e:	c9 f7       	brne	.-14     	; 0x482 <__fixunssfsi+0x14>
 490:	14 c0       	rjmp	.+40     	; 0x4ba <__fixunssfsi+0x4c>
 492:	b1 30       	cpi	r27, 0x01	; 1
 494:	91 f0       	breq	.+36     	; 0x4ba <__fixunssfsi+0x4c>
 496:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_zero>
 49a:	b1 e0       	ldi	r27, 0x01	; 1
 49c:	08 95       	ret
 49e:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_zero>
 4a2:	67 2f       	mov	r22, r23
 4a4:	78 2f       	mov	r23, r24
 4a6:	88 27       	eor	r24, r24
 4a8:	b8 5f       	subi	r27, 0xF8	; 248
 4aa:	39 f0       	breq	.+14     	; 0x4ba <__fixunssfsi+0x4c>
 4ac:	b9 3f       	cpi	r27, 0xF9	; 249
 4ae:	cc f3       	brlt	.-14     	; 0x4a2 <__fixunssfsi+0x34>
 4b0:	86 95       	lsr	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b3 95       	inc	r27
 4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__fixunssfsi+0x42>
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <__fixunssfsi+0x5c>
 4bc:	90 95       	com	r25
 4be:	80 95       	com	r24
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__floatunsisf>:
 4cc:	e8 94       	clt
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <__floatsisf+0x12>

000004d0 <__floatsisf>:
 4d0:	97 fb       	bst	r25, 7
 4d2:	3e f4       	brtc	.+14     	; 0x4e2 <__floatsisf+0x12>
 4d4:	90 95       	com	r25
 4d6:	80 95       	com	r24
 4d8:	70 95       	com	r23
 4da:	61 95       	neg	r22
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	99 23       	and	r25, r25
 4e4:	a9 f0       	breq	.+42     	; 0x510 <__floatsisf+0x40>
 4e6:	f9 2f       	mov	r31, r25
 4e8:	96 e9       	ldi	r25, 0x96	; 150
 4ea:	bb 27       	eor	r27, r27
 4ec:	93 95       	inc	r25
 4ee:	f6 95       	lsr	r31
 4f0:	87 95       	ror	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f1 11       	cpse	r31, r1
 4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <__floatsisf+0x1c>
 4fc:	fa f4       	brpl	.+62     	; 0x53c <__floatsisf+0x6c>
 4fe:	bb 0f       	add	r27, r27
 500:	11 f4       	brne	.+4      	; 0x506 <__floatsisf+0x36>
 502:	60 ff       	sbrs	r22, 0
 504:	1b c0       	rjmp	.+54     	; 0x53c <__floatsisf+0x6c>
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	16 c0       	rjmp	.+44     	; 0x53c <__floatsisf+0x6c>
 510:	88 23       	and	r24, r24
 512:	11 f0       	breq	.+4      	; 0x518 <__floatsisf+0x48>
 514:	96 e9       	ldi	r25, 0x96	; 150
 516:	11 c0       	rjmp	.+34     	; 0x53a <__floatsisf+0x6a>
 518:	77 23       	and	r23, r23
 51a:	21 f0       	breq	.+8      	; 0x524 <__floatsisf+0x54>
 51c:	9e e8       	ldi	r25, 0x8E	; 142
 51e:	87 2f       	mov	r24, r23
 520:	76 2f       	mov	r23, r22
 522:	05 c0       	rjmp	.+10     	; 0x52e <__floatsisf+0x5e>
 524:	66 23       	and	r22, r22
 526:	71 f0       	breq	.+28     	; 0x544 <__floatsisf+0x74>
 528:	96 e8       	ldi	r25, 0x86	; 134
 52a:	86 2f       	mov	r24, r22
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	2a f0       	brmi	.+10     	; 0x53c <__floatsisf+0x6c>
 532:	9a 95       	dec	r25
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	da f7       	brpl	.-10     	; 0x532 <__floatsisf+0x62>
 53c:	88 0f       	add	r24, r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret

00000546 <__fp_split3>:
 546:	57 fd       	sbrc	r21, 7
 548:	90 58       	subi	r25, 0x80	; 128
 54a:	44 0f       	add	r20, r20
 54c:	55 1f       	adc	r21, r21
 54e:	59 f0       	breq	.+22     	; 0x566 <__fp_splitA+0x10>
 550:	5f 3f       	cpi	r21, 0xFF	; 255
 552:	71 f0       	breq	.+28     	; 0x570 <__fp_splitA+0x1a>
 554:	47 95       	ror	r20

00000556 <__fp_splitA>:
 556:	88 0f       	add	r24, r24
 558:	97 fb       	bst	r25, 7
 55a:	99 1f       	adc	r25, r25
 55c:	61 f0       	breq	.+24     	; 0x576 <__fp_splitA+0x20>
 55e:	9f 3f       	cpi	r25, 0xFF	; 255
 560:	79 f0       	breq	.+30     	; 0x580 <__fp_splitA+0x2a>
 562:	87 95       	ror	r24
 564:	08 95       	ret
 566:	12 16       	cp	r1, r18
 568:	13 06       	cpc	r1, r19
 56a:	14 06       	cpc	r1, r20
 56c:	55 1f       	adc	r21, r21
 56e:	f2 cf       	rjmp	.-28     	; 0x554 <__fp_split3+0xe>
 570:	46 95       	lsr	r20
 572:	f1 df       	rcall	.-30     	; 0x556 <__fp_splitA>
 574:	08 c0       	rjmp	.+16     	; 0x586 <__fp_splitA+0x30>
 576:	16 16       	cp	r1, r22
 578:	17 06       	cpc	r1, r23
 57a:	18 06       	cpc	r1, r24
 57c:	99 1f       	adc	r25, r25
 57e:	f1 cf       	rjmp	.-30     	; 0x562 <__fp_splitA+0xc>
 580:	86 95       	lsr	r24
 582:	71 05       	cpc	r23, r1
 584:	61 05       	cpc	r22, r1
 586:	08 94       	sec
 588:	08 95       	ret

0000058a <__fp_zero>:
 58a:	e8 94       	clt

0000058c <__fp_szero>:
 58c:	bb 27       	eor	r27, r27
 58e:	66 27       	eor	r22, r22
 590:	77 27       	eor	r23, r23
 592:	cb 01       	movw	r24, r22
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret

00000598 <__mulsf3>:
 598:	0e 94 df 02 	call	0x5be	; 0x5be <__mulsf3x>
 59c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 5a0:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 5a4:	38 f0       	brcs	.+14     	; 0x5b4 <__mulsf3+0x1c>
 5a6:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__mulsf3+0x1c>
 5ac:	95 23       	and	r25, r21
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__mulsf3+0x1c>
 5b0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 5b4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>
 5b8:	11 24       	eor	r1, r1
 5ba:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__fp_szero>

000005be <__mulsf3x>:
 5be:	0e 94 a3 02 	call	0x546	; 0x546 <__fp_split3>
 5c2:	70 f3       	brcs	.-36     	; 0x5a0 <__mulsf3+0x8>

000005c4 <__mulsf3_pse>:
 5c4:	95 9f       	mul	r25, r21
 5c6:	c1 f3       	breq	.-16     	; 0x5b8 <__mulsf3+0x20>
 5c8:	95 0f       	add	r25, r21
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	55 1f       	adc	r21, r21
 5ce:	62 9f       	mul	r22, r18
 5d0:	f0 01       	movw	r30, r0
 5d2:	72 9f       	mul	r23, r18
 5d4:	bb 27       	eor	r27, r27
 5d6:	f0 0d       	add	r31, r0
 5d8:	b1 1d       	adc	r27, r1
 5da:	63 9f       	mul	r22, r19
 5dc:	aa 27       	eor	r26, r26
 5de:	f0 0d       	add	r31, r0
 5e0:	b1 1d       	adc	r27, r1
 5e2:	aa 1f       	adc	r26, r26
 5e4:	64 9f       	mul	r22, r20
 5e6:	66 27       	eor	r22, r22
 5e8:	b0 0d       	add	r27, r0
 5ea:	a1 1d       	adc	r26, r1
 5ec:	66 1f       	adc	r22, r22
 5ee:	82 9f       	mul	r24, r18
 5f0:	22 27       	eor	r18, r18
 5f2:	b0 0d       	add	r27, r0
 5f4:	a1 1d       	adc	r26, r1
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 9f       	mul	r23, r19
 5fa:	b0 0d       	add	r27, r0
 5fc:	a1 1d       	adc	r26, r1
 5fe:	62 1f       	adc	r22, r18
 600:	83 9f       	mul	r24, r19
 602:	a0 0d       	add	r26, r0
 604:	61 1d       	adc	r22, r1
 606:	22 1f       	adc	r18, r18
 608:	74 9f       	mul	r23, r20
 60a:	33 27       	eor	r19, r19
 60c:	a0 0d       	add	r26, r0
 60e:	61 1d       	adc	r22, r1
 610:	23 1f       	adc	r18, r19
 612:	84 9f       	mul	r24, r20
 614:	60 0d       	add	r22, r0
 616:	21 1d       	adc	r18, r1
 618:	82 2f       	mov	r24, r18
 61a:	76 2f       	mov	r23, r22
 61c:	6a 2f       	mov	r22, r26
 61e:	11 24       	eor	r1, r1
 620:	9f 57       	subi	r25, 0x7F	; 127
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	9a f0       	brmi	.+38     	; 0x64c <__mulsf3_pse+0x88>
 626:	f1 f0       	breq	.+60     	; 0x664 <__mulsf3_pse+0xa0>
 628:	88 23       	and	r24, r24
 62a:	4a f0       	brmi	.+18     	; 0x63e <__mulsf3_pse+0x7a>
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	bb 1f       	adc	r27, r27
 632:	66 1f       	adc	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	50 40       	sbci	r21, 0x00	; 0
 63c:	a9 f7       	brne	.-22     	; 0x628 <__mulsf3_pse+0x64>
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	51 05       	cpc	r21, r1
 642:	80 f0       	brcs	.+32     	; 0x664 <__mulsf3_pse+0xa0>
 644:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 648:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__fp_szero>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	e4 f3       	brlt	.-8      	; 0x648 <__mulsf3_pse+0x84>
 650:	98 3e       	cpi	r25, 0xE8	; 232
 652:	d4 f3       	brlt	.-12     	; 0x648 <__mulsf3_pse+0x84>
 654:	86 95       	lsr	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f7 95       	ror	r31
 65e:	e7 95       	ror	r30
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	c1 f7       	brne	.-16     	; 0x654 <__mulsf3_pse+0x90>
 664:	fe 2b       	or	r31, r30
 666:	88 0f       	add	r24, r24
 668:	91 1d       	adc	r25, r1
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_inf>:
 672:	97 f9       	bld	r25, 7
 674:	9f 67       	ori	r25, 0x7F	; 127
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	08 95       	ret

0000067e <__fp_nan>:
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	80 ec       	ldi	r24, 0xC0	; 192
 682:	08 95       	ret

00000684 <__fp_pscA>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	09 06       	cpc	r0, r25
 690:	08 95       	ret

00000692 <__fp_pscB>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	05 06       	cpc	r0, r21
 69e:	08 95       	ret

000006a0 <__fp_round>:
 6a0:	09 2e       	mov	r0, r25
 6a2:	03 94       	inc	r0
 6a4:	00 0c       	add	r0, r0
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0xc>
 6a8:	88 23       	and	r24, r24
 6aa:	52 f0       	brmi	.+20     	; 0x6c0 <__fp_round+0x20>
 6ac:	bb 0f       	add	r27, r27
 6ae:	40 f4       	brcc	.+16     	; 0x6c0 <__fp_round+0x20>
 6b0:	bf 2b       	or	r27, r31
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0x18>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__fp_round+0x20>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <atoi>:
 6c2:	fc 01       	movw	r30, r24
 6c4:	88 27       	eor	r24, r24
 6c6:	99 27       	eor	r25, r25
 6c8:	e8 94       	clt
 6ca:	21 91       	ld	r18, Z+
 6cc:	20 32       	cpi	r18, 0x20	; 32
 6ce:	e9 f3       	breq	.-6      	; 0x6ca <atoi+0x8>
 6d0:	29 30       	cpi	r18, 0x09	; 9
 6d2:	10 f0       	brcs	.+4      	; 0x6d8 <atoi+0x16>
 6d4:	2e 30       	cpi	r18, 0x0E	; 14
 6d6:	c8 f3       	brcs	.-14     	; 0x6ca <atoi+0x8>
 6d8:	2b 32       	cpi	r18, 0x2B	; 43
 6da:	41 f0       	breq	.+16     	; 0x6ec <atoi+0x2a>
 6dc:	2d 32       	cpi	r18, 0x2D	; 45
 6de:	39 f4       	brne	.+14     	; 0x6ee <atoi+0x2c>
 6e0:	68 94       	set
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <atoi+0x2a>
 6e4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulhi_const_10>
 6e8:	82 0f       	add	r24, r18
 6ea:	91 1d       	adc	r25, r1
 6ec:	21 91       	ld	r18, Z+
 6ee:	20 53       	subi	r18, 0x30	; 48
 6f0:	2a 30       	cpi	r18, 0x0A	; 10
 6f2:	c0 f3       	brcs	.-16     	; 0x6e4 <atoi+0x22>
 6f4:	1e f4       	brtc	.+6      	; 0x6fc <atoi+0x3a>
 6f6:	90 95       	com	r25
 6f8:	81 95       	neg	r24
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__mulhi_const_10>:
 6fe:	7a e0       	ldi	r23, 0x0A	; 10
 700:	97 9f       	mul	r25, r23
 702:	90 2d       	mov	r25, r0
 704:	87 9f       	mul	r24, r23
 706:	80 2d       	mov	r24, r0
 708:	91 0d       	add	r25, r1
 70a:	11 24       	eor	r1, r1
 70c:	08 95       	ret

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
