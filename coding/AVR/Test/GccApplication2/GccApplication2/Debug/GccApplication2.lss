
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000508  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082f  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b2  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a8  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000202b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  9e:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initTimer1>:
int del1 = 1000;  // Microseconds for motor 1
int del2 = 1600;  // Microseconds for motor 2

void initTimer1() {
	// Initialize Timer1 to count microseconds
	TCCR1A = 0;
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1

	// Set the prescaler to 64
	TCCR1B |= (1 << CS11) | (1 << CS10);
  b0:	80 81       	ld	r24, Z
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	80 83       	st	Z, r24

	// Enable Timer1 overflow interrupt
	TIMSK1 |= (1 << TOIE1);
  b6:	ef e6       	ldi	r30, 0x6F	; 111
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24

	// Initialize the counter
	TCNT1 = 0;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	// Enable global interrupts
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <__vector_13>:
}

ISR(TIMER1_OVF_vect) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
	// Increment the overflow counter
	timer1_overflow_count++;
  de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_overflow_count>
  e2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_overflow_count+0x1>
  e6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_overflow_count+0x2>
  ea:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_overflow_count+0x3>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer1_overflow_count>
  f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer1_overflow_count+0x1>
  fc:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer1_overflow_count+0x2>
 100:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer1_overflow_count+0x3>
}
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <micros>:

unsigned long micros() {
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;  // Save the global interrupt flag
 11e:	2f b7       	in	r18, 0x3f	; 63
	cli();                   // Disable interrupts temporarily
 120:	f8 94       	cli

	// Calculate microseconds based on timer value and overflow count
	m = timer1_overflow_count;
 122:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_overflow_count>
 126:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_overflow_count+0x1>
 12a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_overflow_count+0x2>
 12e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_overflow_count+0x3>
	m = (m << 16) | TCNT1;
 132:	bc 01       	movw	r22, r24
 134:	55 27       	eor	r21, r21
 136:	44 27       	eor	r20, r20
 138:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 13c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	7a 01       	movw	r14, r20
 146:	8b 01       	movw	r16, r22
 148:	e8 2a       	or	r14, r24
 14a:	f9 2a       	or	r15, r25
 14c:	0a 2b       	or	r16, r26
 14e:	1b 2b       	or	r17, r27
 150:	c8 01       	movw	r24, r16
 152:	b7 01       	movw	r22, r14

	SREG = oldSREG;  // Restore the global interrupt flag
 154:	2f bf       	out	0x3f, r18	; 63
	return m * (64.0 / (F_CPU / 1000000.0));
 156:	0e 94 87 01 	call	0x30e	; 0x30e <__floatunsisf>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	50 e4       	ldi	r21, 0x40	; 64
 162:	0e 94 ed 01 	call	0x3da	; 0x3da <__mulsf3>
 166:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__fixunssfsi>
}
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	08 95       	ret

00000174 <setup>:

void setup() {
	// Set the direction pins as outputs
	DDRD |= (1 << dirPin1) | (1 << stepPin1) | (1 << dirPin2) | (1 << stepPin2);
 174:	8a b1       	in	r24, 0x0a	; 10
 176:	80 6f       	ori	r24, 0xF0	; 240
 178:	8a b9       	out	0x0a, r24	; 10

	// Set initial direction of motors
	PORTD |= (1 << dirPin1);  // Set dirPin1 HIGH
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << dirPin2);  // Set dirPin2 HIGH
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 64       	ori	r24, 0x40	; 64
 184:	8b b9       	out	0x0b, r24	; 11
 186:	08 95       	ret

00000188 <loop>:
}

void loop() {
 188:	4f 92       	push	r4
 18a:	5f 92       	push	r5
 18c:	6f 92       	push	r6
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	const long interval1 = del1;  // Microseconds for motor 1
 1a8:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <del1>
 1ac:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <del1+0x1>
	bool stepState1 = false;

	const long interval2 = del2;  // Microseconds for motor 2
 1b0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	bool stepState2 = false;

	for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
void loop() {
	const long interval1 = del1;  // Microseconds for motor 1
	bool stepState1 = false;

	const long interval2 = del2;  // Microseconds for motor 2
	bool stepState2 = false;
 1bc:	81 2c       	mov	r8, r1
	PORTD |= (1 << dirPin2);  // Set dirPin2 HIGH
}

void loop() {
	const long interval1 = del1;  // Microseconds for motor 1
	bool stepState1 = false;
 1be:	91 2c       	mov	r9, r1

	const long interval2 = del2;  // Microseconds for motor 2
	bool stepState2 = false;

	for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 1c0:	5b c0       	rjmp	.+182    	; 0x278 <loop+0xf0>
		unsigned long currentMicros1 = micros();
 1c2:	0e 94 8b 00 	call	0x116	; 0x116 <micros>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
		unsigned long currentMicros2 = micros();
 1ca:	0e 94 8b 00 	call	0x116	; 0x116 <micros>

		if (currentMicros1 - previousMicros1 >= interval1) {
 1ce:	40 90 08 01 	lds	r4, 0x0108	; 0x800108 <previousMicros1>
 1d2:	50 90 09 01 	lds	r5, 0x0109	; 0x800109 <previousMicros1+0x1>
 1d6:	60 90 0a 01 	lds	r6, 0x010A	; 0x80010a <previousMicros1+0x2>
 1da:	70 90 0b 01 	lds	r7, 0x010B	; 0x80010b <previousMicros1+0x3>
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	24 19       	sub	r18, r4
 1e4:	35 09       	sbc	r19, r5
 1e6:	46 09       	sbc	r20, r6
 1e8:	57 09       	sbc	r21, r7
 1ea:	25 01       	movw	r4, r10
 1ec:	0b 2c       	mov	r0, r11
 1ee:	00 0c       	add	r0, r0
 1f0:	66 08       	sbc	r6, r6
 1f2:	77 08       	sbc	r7, r7
 1f4:	24 15       	cp	r18, r4
 1f6:	35 05       	cpc	r19, r5
 1f8:	46 05       	cpc	r20, r6
 1fa:	57 05       	cpc	r21, r7
 1fc:	90 f0       	brcs	.+36     	; 0x222 <loop+0x9a>
			previousMicros1 = currentMicros1;
 1fe:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <previousMicros1>
 202:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <previousMicros1+0x1>
 206:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <previousMicros1+0x2>
 20a:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <previousMicros1+0x3>

			stepState1 = !stepState1;
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	92 26       	eor	r9, r18

			if (stepState1) {
 212:	21 f0       	breq	.+8      	; 0x21c <loop+0x94>
				PORTD |= (1 << stepPin1);  // Set stepPin1 HIGH
 214:	2b b1       	in	r18, 0x0b	; 11
 216:	20 62       	ori	r18, 0x20	; 32
 218:	2b b9       	out	0x0b, r18	; 11
 21a:	03 c0       	rjmp	.+6      	; 0x222 <loop+0x9a>
				} else {
				PORTD &= ~(1 << stepPin1); // Set stepPin1 LOW
 21c:	2b b1       	in	r18, 0x0b	; 11
 21e:	2f 7d       	andi	r18, 0xDF	; 223
 220:	2b b9       	out	0x0b, r18	; 11
			}
		}

		if (currentMicros2 - previousMicros2 >= interval2) {
 222:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
 226:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
 22a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
 22e:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
 232:	2b 01       	movw	r4, r22
 234:	3c 01       	movw	r6, r24
 236:	4c 18       	sub	r4, r12
 238:	5d 08       	sbc	r5, r13
 23a:	6e 08       	sbc	r6, r14
 23c:	7f 08       	sbc	r7, r15
 23e:	68 01       	movw	r12, r16
 240:	01 2e       	mov	r0, r17
 242:	00 0c       	add	r0, r0
 244:	ee 08       	sbc	r14, r14
 246:	ff 08       	sbc	r15, r15
 248:	4c 14       	cp	r4, r12
 24a:	5d 04       	cpc	r5, r13
 24c:	6e 04       	cpc	r6, r14
 24e:	7f 04       	cpc	r7, r15
 250:	90 f0       	brcs	.+36     	; 0x276 <loop+0xee>
			previousMicros2 = currentMicros2;
 252:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 256:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 25a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 25e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>

			stepState2 = !stepState2;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	88 26       	eor	r8, r24

			if (stepState2) {
 266:	21 f0       	breq	.+8      	; 0x270 <loop+0xe8>
				PORTD |= (1 << stepPin2);  // Set stepPin2 HIGH
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	03 c0       	rjmp	.+6      	; 0x276 <loop+0xee>
				} else {
				PORTD &= ~(1 << stepPin2); // Set stepPin2 LOW
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	8b b9       	out	0x0b, r24	; 11
	bool stepState1 = false;

	const long interval2 = del2;  // Microseconds for motor 2
	bool stepState2 = false;

	for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	c8 3c       	cpi	r28, 0xC8	; 200
 27a:	d1 05       	cpc	r29, r1
 27c:	0c f4       	brge	.+2      	; 0x280 <loop+0xf8>
 27e:	a1 cf       	rjmp	.-190    	; 0x1c2 <loop+0x3a>
				} else {
				PORTD &= ~(1 << stepPin2); // Set stepPin2 LOW
			}
		}
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	8f 90       	pop	r8
 298:	7f 90       	pop	r7
 29a:	6f 90       	pop	r6
 29c:	5f 90       	pop	r5
 29e:	4f 90       	pop	r4
 2a0:	08 95       	ret

000002a2 <main>:

int main(void) {
	initTimer1();
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <initTimer1>
	setup();
 2a6:	0e 94 ba 00 	call	0x174	; 0x174 <setup>

	while (1) {
		loop();
 2aa:	0e 94 c4 00 	call	0x188	; 0x188 <loop>
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <main+0x8>

000002b0 <__fixunssfsi>:
 2b0:	0e 94 cc 01 	call	0x398	; 0x398 <__fp_splitA>
 2b4:	88 f0       	brcs	.+34     	; 0x2d8 <__fixunssfsi+0x28>
 2b6:	9f 57       	subi	r25, 0x7F	; 127
 2b8:	98 f0       	brcs	.+38     	; 0x2e0 <__fixunssfsi+0x30>
 2ba:	b9 2f       	mov	r27, r25
 2bc:	99 27       	eor	r25, r25
 2be:	b7 51       	subi	r27, 0x17	; 23
 2c0:	b0 f0       	brcs	.+44     	; 0x2ee <__fixunssfsi+0x3e>
 2c2:	e1 f0       	breq	.+56     	; 0x2fc <__fixunssfsi+0x4c>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	1a f0       	brmi	.+6      	; 0x2d4 <__fixunssfsi+0x24>
 2ce:	ba 95       	dec	r27
 2d0:	c9 f7       	brne	.-14     	; 0x2c4 <__fixunssfsi+0x14>
 2d2:	14 c0       	rjmp	.+40     	; 0x2fc <__fixunssfsi+0x4c>
 2d4:	b1 30       	cpi	r27, 0x01	; 1
 2d6:	91 f0       	breq	.+36     	; 0x2fc <__fixunssfsi+0x4c>
 2d8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fp_zero>
 2dc:	b1 e0       	ldi	r27, 0x01	; 1
 2de:	08 95       	ret
 2e0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_zero>
 2e4:	67 2f       	mov	r22, r23
 2e6:	78 2f       	mov	r23, r24
 2e8:	88 27       	eor	r24, r24
 2ea:	b8 5f       	subi	r27, 0xF8	; 248
 2ec:	39 f0       	breq	.+14     	; 0x2fc <__fixunssfsi+0x4c>
 2ee:	b9 3f       	cpi	r27, 0xF9	; 249
 2f0:	cc f3       	brlt	.-14     	; 0x2e4 <__fixunssfsi+0x34>
 2f2:	86 95       	lsr	r24
 2f4:	77 95       	ror	r23
 2f6:	67 95       	ror	r22
 2f8:	b3 95       	inc	r27
 2fa:	d9 f7       	brne	.-10     	; 0x2f2 <__fixunssfsi+0x42>
 2fc:	3e f4       	brtc	.+14     	; 0x30c <__fixunssfsi+0x5c>
 2fe:	90 95       	com	r25
 300:	80 95       	com	r24
 302:	70 95       	com	r23
 304:	61 95       	neg	r22
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	08 95       	ret

0000030e <__floatunsisf>:
 30e:	e8 94       	clt
 310:	09 c0       	rjmp	.+18     	; 0x324 <__floatsisf+0x12>

00000312 <__floatsisf>:
 312:	97 fb       	bst	r25, 7
 314:	3e f4       	brtc	.+14     	; 0x324 <__floatsisf+0x12>
 316:	90 95       	com	r25
 318:	80 95       	com	r24
 31a:	70 95       	com	r23
 31c:	61 95       	neg	r22
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	8f 4f       	sbci	r24, 0xFF	; 255
 322:	9f 4f       	sbci	r25, 0xFF	; 255
 324:	99 23       	and	r25, r25
 326:	a9 f0       	breq	.+42     	; 0x352 <__floatsisf+0x40>
 328:	f9 2f       	mov	r31, r25
 32a:	96 e9       	ldi	r25, 0x96	; 150
 32c:	bb 27       	eor	r27, r27
 32e:	93 95       	inc	r25
 330:	f6 95       	lsr	r31
 332:	87 95       	ror	r24
 334:	77 95       	ror	r23
 336:	67 95       	ror	r22
 338:	b7 95       	ror	r27
 33a:	f1 11       	cpse	r31, r1
 33c:	f8 cf       	rjmp	.-16     	; 0x32e <__floatsisf+0x1c>
 33e:	fa f4       	brpl	.+62     	; 0x37e <__floatsisf+0x6c>
 340:	bb 0f       	add	r27, r27
 342:	11 f4       	brne	.+4      	; 0x348 <__floatsisf+0x36>
 344:	60 ff       	sbrs	r22, 0
 346:	1b c0       	rjmp	.+54     	; 0x37e <__floatsisf+0x6c>
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f 4f       	sbci	r24, 0xFF	; 255
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	16 c0       	rjmp	.+44     	; 0x37e <__floatsisf+0x6c>
 352:	88 23       	and	r24, r24
 354:	11 f0       	breq	.+4      	; 0x35a <__floatsisf+0x48>
 356:	96 e9       	ldi	r25, 0x96	; 150
 358:	11 c0       	rjmp	.+34     	; 0x37c <__floatsisf+0x6a>
 35a:	77 23       	and	r23, r23
 35c:	21 f0       	breq	.+8      	; 0x366 <__floatsisf+0x54>
 35e:	9e e8       	ldi	r25, 0x8E	; 142
 360:	87 2f       	mov	r24, r23
 362:	76 2f       	mov	r23, r22
 364:	05 c0       	rjmp	.+10     	; 0x370 <__floatsisf+0x5e>
 366:	66 23       	and	r22, r22
 368:	71 f0       	breq	.+28     	; 0x386 <__floatsisf+0x74>
 36a:	96 e8       	ldi	r25, 0x86	; 134
 36c:	86 2f       	mov	r24, r22
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	2a f0       	brmi	.+10     	; 0x37e <__floatsisf+0x6c>
 374:	9a 95       	dec	r25
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	88 1f       	adc	r24, r24
 37c:	da f7       	brpl	.-10     	; 0x374 <__floatsisf+0x62>
 37e:	88 0f       	add	r24, r24
 380:	96 95       	lsr	r25
 382:	87 95       	ror	r24
 384:	97 f9       	bld	r25, 7
 386:	08 95       	ret

00000388 <__fp_split3>:
 388:	57 fd       	sbrc	r21, 7
 38a:	90 58       	subi	r25, 0x80	; 128
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	59 f0       	breq	.+22     	; 0x3a8 <__fp_splitA+0x10>
 392:	5f 3f       	cpi	r21, 0xFF	; 255
 394:	71 f0       	breq	.+28     	; 0x3b2 <__fp_splitA+0x1a>
 396:	47 95       	ror	r20

00000398 <__fp_splitA>:
 398:	88 0f       	add	r24, r24
 39a:	97 fb       	bst	r25, 7
 39c:	99 1f       	adc	r25, r25
 39e:	61 f0       	breq	.+24     	; 0x3b8 <__fp_splitA+0x20>
 3a0:	9f 3f       	cpi	r25, 0xFF	; 255
 3a2:	79 f0       	breq	.+30     	; 0x3c2 <__fp_splitA+0x2a>
 3a4:	87 95       	ror	r24
 3a6:	08 95       	ret
 3a8:	12 16       	cp	r1, r18
 3aa:	13 06       	cpc	r1, r19
 3ac:	14 06       	cpc	r1, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	f2 cf       	rjmp	.-28     	; 0x396 <__fp_split3+0xe>
 3b2:	46 95       	lsr	r20
 3b4:	f1 df       	rcall	.-30     	; 0x398 <__fp_splitA>
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <__fp_splitA+0x30>
 3b8:	16 16       	cp	r1, r22
 3ba:	17 06       	cpc	r1, r23
 3bc:	18 06       	cpc	r1, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	f1 cf       	rjmp	.-30     	; 0x3a4 <__fp_splitA+0xc>
 3c2:	86 95       	lsr	r24
 3c4:	71 05       	cpc	r23, r1
 3c6:	61 05       	cpc	r22, r1
 3c8:	08 94       	sec
 3ca:	08 95       	ret

000003cc <__fp_zero>:
 3cc:	e8 94       	clt

000003ce <__fp_szero>:
 3ce:	bb 27       	eor	r27, r27
 3d0:	66 27       	eor	r22, r22
 3d2:	77 27       	eor	r23, r23
 3d4:	cb 01       	movw	r24, r22
 3d6:	97 f9       	bld	r25, 7
 3d8:	08 95       	ret

000003da <__mulsf3>:
 3da:	0e 94 00 02 	call	0x400	; 0x400 <__mulsf3x>
 3de:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_round>
 3e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscA>
 3e6:	38 f0       	brcs	.+14     	; 0x3f6 <__mulsf3+0x1c>
 3e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_pscB>
 3ec:	20 f0       	brcs	.+8      	; 0x3f6 <__mulsf3+0x1c>
 3ee:	95 23       	and	r25, r21
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <__mulsf3+0x1c>
 3f2:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__fp_inf>
 3f6:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_nan>
 3fa:	11 24       	eor	r1, r1
 3fc:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_szero>

00000400 <__mulsf3x>:
 400:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_split3>
 404:	70 f3       	brcs	.-36     	; 0x3e2 <__mulsf3+0x8>

00000406 <__mulsf3_pse>:
 406:	95 9f       	mul	r25, r21
 408:	c1 f3       	breq	.-16     	; 0x3fa <__mulsf3+0x20>
 40a:	95 0f       	add	r25, r21
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	55 1f       	adc	r21, r21
 410:	62 9f       	mul	r22, r18
 412:	f0 01       	movw	r30, r0
 414:	72 9f       	mul	r23, r18
 416:	bb 27       	eor	r27, r27
 418:	f0 0d       	add	r31, r0
 41a:	b1 1d       	adc	r27, r1
 41c:	63 9f       	mul	r22, r19
 41e:	aa 27       	eor	r26, r26
 420:	f0 0d       	add	r31, r0
 422:	b1 1d       	adc	r27, r1
 424:	aa 1f       	adc	r26, r26
 426:	64 9f       	mul	r22, r20
 428:	66 27       	eor	r22, r22
 42a:	b0 0d       	add	r27, r0
 42c:	a1 1d       	adc	r26, r1
 42e:	66 1f       	adc	r22, r22
 430:	82 9f       	mul	r24, r18
 432:	22 27       	eor	r18, r18
 434:	b0 0d       	add	r27, r0
 436:	a1 1d       	adc	r26, r1
 438:	62 1f       	adc	r22, r18
 43a:	73 9f       	mul	r23, r19
 43c:	b0 0d       	add	r27, r0
 43e:	a1 1d       	adc	r26, r1
 440:	62 1f       	adc	r22, r18
 442:	83 9f       	mul	r24, r19
 444:	a0 0d       	add	r26, r0
 446:	61 1d       	adc	r22, r1
 448:	22 1f       	adc	r18, r18
 44a:	74 9f       	mul	r23, r20
 44c:	33 27       	eor	r19, r19
 44e:	a0 0d       	add	r26, r0
 450:	61 1d       	adc	r22, r1
 452:	23 1f       	adc	r18, r19
 454:	84 9f       	mul	r24, r20
 456:	60 0d       	add	r22, r0
 458:	21 1d       	adc	r18, r1
 45a:	82 2f       	mov	r24, r18
 45c:	76 2f       	mov	r23, r22
 45e:	6a 2f       	mov	r22, r26
 460:	11 24       	eor	r1, r1
 462:	9f 57       	subi	r25, 0x7F	; 127
 464:	50 40       	sbci	r21, 0x00	; 0
 466:	9a f0       	brmi	.+38     	; 0x48e <__mulsf3_pse+0x88>
 468:	f1 f0       	breq	.+60     	; 0x4a6 <__mulsf3_pse+0xa0>
 46a:	88 23       	and	r24, r24
 46c:	4a f0       	brmi	.+18     	; 0x480 <__mulsf3_pse+0x7a>
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	bb 1f       	adc	r27, r27
 474:	66 1f       	adc	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	50 40       	sbci	r21, 0x00	; 0
 47e:	a9 f7       	brne	.-22     	; 0x46a <__mulsf3_pse+0x64>
 480:	9e 3f       	cpi	r25, 0xFE	; 254
 482:	51 05       	cpc	r21, r1
 484:	80 f0       	brcs	.+32     	; 0x4a6 <__mulsf3_pse+0xa0>
 486:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__fp_inf>
 48a:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_szero>
 48e:	5f 3f       	cpi	r21, 0xFF	; 255
 490:	e4 f3       	brlt	.-8      	; 0x48a <__mulsf3_pse+0x84>
 492:	98 3e       	cpi	r25, 0xE8	; 232
 494:	d4 f3       	brlt	.-12     	; 0x48a <__mulsf3_pse+0x84>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b7 95       	ror	r27
 49e:	f7 95       	ror	r31
 4a0:	e7 95       	ror	r30
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	c1 f7       	brne	.-16     	; 0x496 <__mulsf3_pse+0x90>
 4a6:	fe 2b       	or	r31, r30
 4a8:	88 0f       	add	r24, r24
 4aa:	91 1d       	adc	r25, r1
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	97 f9       	bld	r25, 7
 4b2:	08 95       	ret

000004b4 <__fp_inf>:
 4b4:	97 f9       	bld	r25, 7
 4b6:	9f 67       	ori	r25, 0x7F	; 127
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	08 95       	ret

000004c0 <__fp_nan>:
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	80 ec       	ldi	r24, 0xC0	; 192
 4c4:	08 95       	ret

000004c6 <__fp_pscA>:
 4c6:	00 24       	eor	r0, r0
 4c8:	0a 94       	dec	r0
 4ca:	16 16       	cp	r1, r22
 4cc:	17 06       	cpc	r1, r23
 4ce:	18 06       	cpc	r1, r24
 4d0:	09 06       	cpc	r0, r25
 4d2:	08 95       	ret

000004d4 <__fp_pscB>:
 4d4:	00 24       	eor	r0, r0
 4d6:	0a 94       	dec	r0
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	14 06       	cpc	r1, r20
 4de:	05 06       	cpc	r0, r21
 4e0:	08 95       	ret

000004e2 <__fp_round>:
 4e2:	09 2e       	mov	r0, r25
 4e4:	03 94       	inc	r0
 4e6:	00 0c       	add	r0, r0
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__fp_round+0xc>
 4ea:	88 23       	and	r24, r24
 4ec:	52 f0       	brmi	.+20     	; 0x502 <__fp_round+0x20>
 4ee:	bb 0f       	add	r27, r27
 4f0:	40 f4       	brcc	.+16     	; 0x502 <__fp_round+0x20>
 4f2:	bf 2b       	or	r27, r31
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__fp_round+0x18>
 4f6:	60 ff       	sbrs	r22, 0
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <__fp_round+0x20>
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	08 95       	ret

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
