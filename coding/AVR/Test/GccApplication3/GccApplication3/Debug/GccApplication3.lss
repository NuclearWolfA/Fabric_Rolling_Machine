
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071f  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066b  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bb  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile int encoderPosition = 0;
volatile int lastEncoded = 0;

void setup() {
	// Set PIN_A and PIN_B as inputs
	DDRD &= ~((1 << PIN_A) | (1 << PIN_B));
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	83 7f       	andi	r24, 0xF3	; 243
  94:	8a b9       	out	0x0a, r24	; 10
	
	// Enable pull-up resistors on PIN_A and PIN_B
	PORTD |= (1 << PIN_A) | (1 << PIN_B);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	8c 60       	ori	r24, 0x0C	; 12
  9a:	8b b9       	out	0x0b, r24	; 11

	// Set up the built-in LED pin as output
	DDRB |= (1 << PB5);  // PB5 is the built-in LED on the Arduino Uno
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	84 b9       	out	0x04, r24	; 4

	// Enable external interrupts on INT0 (PD2) for any logical change
	EICRA |= (1 << ISC00);
  a2:	e9 e6       	ldi	r30, 0x69	; 105
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
  ac:	8d b3       	in	r24, 0x1d	; 29
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8d bb       	out	0x1d, r24	; 29

	// Enable global interrupts
	sei();
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <__vector_1>:
}

ISR(INT0_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	// Read the current state of the encoder pins
	int MSB = (PIND & (1 << PIN_A)) ? 1 : 0;  // MSB = most significant bit
  cc:	49 b1       	in	r20, 0x09	; 9
  ce:	42 fb       	bst	r20, 2
  d0:	88 27       	eor	r24, r24
  d2:	80 f9       	bld	r24, 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
	int LSB = (PIND & (1 << PIN_B)) ? 1 : 0;  // LSB = least significant bit
  d6:	49 b1       	in	r20, 0x09	; 9
  d8:	43 fb       	bst	r20, 3
  da:	22 27       	eor	r18, r18
  dc:	20 f9       	bld	r18, 0
  de:	30 e0       	ldi	r19, 0x00	; 0

	int encoded = (MSB << 1) | LSB;  // Combine the two bits
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	28 2b       	or	r18, r24
  e6:	39 2b       	or	r19, r25
	int sum = (lastEncoded << 2) | encoded;  // Sum up the old and new encoded values
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	82 2b       	or	r24, r18
  fa:	93 2b       	or	r25, r19

	// Determine the direction and update the position
	if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderPosition++;
  fc:	8d 30       	cpi	r24, 0x0D	; 13
  fe:	91 05       	cpc	r25, r1
 100:	49 f0       	breq	.+18     	; 0x114 <__vector_1+0x5e>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	91 05       	cpc	r25, r1
 106:	31 f0       	breq	.+12     	; 0x114 <__vector_1+0x5e>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	91 05       	cpc	r25, r1
 10c:	19 f0       	breq	.+6      	; 0x114 <__vector_1+0x5e>
 10e:	8b 30       	cpi	r24, 0x0B	; 11
 110:	91 05       	cpc	r25, r1
 112:	51 f4       	brne	.+20     	; 0x128 <__vector_1+0x72>
 114:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <encoderPosition>
 118:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <encoderPosition+0x1>
 11c:	4f 5f       	subi	r20, 0xFF	; 255
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <encoderPosition+0x1>
 124:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <encoderPosition>
	if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderPosition--;
 128:	8e 30       	cpi	r24, 0x0E	; 14
 12a:	91 05       	cpc	r25, r1
 12c:	41 f0       	breq	.+16     	; 0x13e <__vector_1+0x88>
 12e:	87 30       	cpi	r24, 0x07	; 7
 130:	91 05       	cpc	r25, r1
 132:	29 f0       	breq	.+10     	; 0x13e <__vector_1+0x88>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 05       	cpc	r25, r1
 138:	11 f0       	breq	.+4      	; 0x13e <__vector_1+0x88>
 13a:	08 97       	sbiw	r24, 0x08	; 8
 13c:	49 f4       	brne	.+18     	; 0x150 <__vector_1+0x9a>
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <encoderPosition>
 142:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <encoderPosition+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <encoderPosition+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <encoderPosition>

	lastEncoded = encoded;  // Store the current encoded value for the next iteration
 150:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Check if 10 steps have been completed
	if (encoderPosition >= 10 || encoderPosition <= -10) {
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <encoderPosition>
 15c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <encoderPosition+0x1>
 160:	0a 97       	sbiw	r24, 0x0a	; 10
 162:	3c f4       	brge	.+14     	; 0x172 <__vector_1+0xbc>
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <encoderPosition>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <encoderPosition+0x1>
 16c:	87 3f       	cpi	r24, 0xF7	; 247
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	44 f4       	brge	.+16     	; 0x182 <__vector_1+0xcc>
		PORTB ^= (1 << PB5);  // Toggle the LED
 172:	95 b1       	in	r25, 0x05	; 5
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	89 27       	eor	r24, r25
 178:	85 b9       	out	0x05, r24	; 5
		encoderPosition = 0;  // Reset the position
 17a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <encoderPosition+0x1>
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <encoderPosition>
	}
}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:

int main(void) {
	setup();
 198:	0e 94 48 00 	call	0x90	; 0x90 <setup>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x4>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
