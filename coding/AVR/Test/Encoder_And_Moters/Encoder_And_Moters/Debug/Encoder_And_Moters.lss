
Encoder_And_Moters.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  00000728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089b  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cc  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040b  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b9  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  9e:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
int del1 = 500;  // Microseconds for motor 1
int del2 = 500;  // Microseconds for motor 2

void setup() {
	// Encoder pin setup
	DDRD &= ~((1 << PIN_A) | (1 << PIN_B));  // Set PIN_A and PIN_B as inputs
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 7f       	andi	r24, 0xF3	; 243
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIN_A) | (1 << PIN_B);    // Enable pull-up resistors on PIN_A and PIN_B
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8c 60       	ori	r24, 0x0C	; 12
  b0:	8b b9       	out	0x0b, r24	; 11

	// Built-in LED pin setup
	DDRB |= (1 << PB5);  // Set PB5 as output for the built-in LED
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	84 b9       	out	0x04, r24	; 4

	// Motor control pin setup
	DDRD |= (1 << dirPin1) | (1 << stepPin1) | (1 << dirPin2) | (1 << stepPin2);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << dirPin1);  // Set initial direction of motor 1
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << dirPin2);  // Set initial direction of motor 2
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8b b9       	out	0x0b, r24	; 11

	// Interrupt setup for the encoder
	EICRA |= (1 << ISC00);    // Enable interrupt on any logical change for INT0 (PD2)
  ca:	e9 e6       	ldi	r30, 0x69	; 105
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Enable INT0
  d4:	8d b3       	in	r24, 0x1d	; 29
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8d bb       	out	0x1d, r24	; 29

	// Timer1 setup for timing intervals
	TCCR1A = 0;
  da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	TCCR1B |= (1 << CS11) | (1 << CS10);  // Set prescaler to 64
  e4:	80 81       	ld	r24, Z
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);               // Enable Timer1 overflow interrupt
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
	TCNT1 = 0;
  f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	sei();  // Enable global interrupts
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <__vector_1>:
}

ISR(INT0_vect) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
	// Read the current state of the encoder pins
	int MSB = (PIND & (1 << PIN_A)) ? 1 : 0;  // MSB = most significant bit
 11e:	49 b1       	in	r20, 0x09	; 9
 120:	42 fb       	bst	r20, 2
 122:	88 27       	eor	r24, r24
 124:	80 f9       	bld	r24, 0
 126:	90 e0       	ldi	r25, 0x00	; 0
	int LSB = (PIND & (1 << PIN_B)) ? 1 : 0;  // LSB = least significant bit
 128:	49 b1       	in	r20, 0x09	; 9
 12a:	43 fb       	bst	r20, 3
 12c:	22 27       	eor	r18, r18
 12e:	20 f9       	bld	r18, 0
 130:	30 e0       	ldi	r19, 0x00	; 0

	int encoded = (MSB << 1) | LSB;  // Combine the two bits
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	28 2b       	or	r18, r24
 138:	39 2b       	or	r19, r25
	int sum = (lastEncoded << 2) | encoded;  // Sum up the old and new encoded values
 13a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lastEncoded>
 13e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lastEncoded+0x1>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	82 2b       	or	r24, r18
 14c:	93 2b       	or	r25, r19

	// Determine the direction and update the position
	if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderPosition++;
 14e:	8d 30       	cpi	r24, 0x0D	; 13
 150:	91 05       	cpc	r25, r1
 152:	49 f0       	breq	.+18     	; 0x166 <__vector_1+0x66>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	91 05       	cpc	r25, r1
 158:	31 f0       	breq	.+12     	; 0x166 <__vector_1+0x66>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	91 05       	cpc	r25, r1
 15e:	19 f0       	breq	.+6      	; 0x166 <__vector_1+0x66>
 160:	8b 30       	cpi	r24, 0x0B	; 11
 162:	91 05       	cpc	r25, r1
 164:	51 f4       	brne	.+20     	; 0x17a <__vector_1+0x7a>
 166:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <encoderPosition>
 16a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <encoderPosition+0x1>
 16e:	4f 5f       	subi	r20, 0xFF	; 255
 170:	5f 4f       	sbci	r21, 0xFF	; 255
 172:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <encoderPosition+0x1>
 176:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <encoderPosition>
	if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderPosition--;
 17a:	8e 30       	cpi	r24, 0x0E	; 14
 17c:	91 05       	cpc	r25, r1
 17e:	41 f0       	breq	.+16     	; 0x190 <__vector_1+0x90>
 180:	87 30       	cpi	r24, 0x07	; 7
 182:	91 05       	cpc	r25, r1
 184:	29 f0       	breq	.+10     	; 0x190 <__vector_1+0x90>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	11 f0       	breq	.+4      	; 0x190 <__vector_1+0x90>
 18c:	08 97       	sbiw	r24, 0x08	; 8
 18e:	49 f4       	brne	.+18     	; 0x1a2 <__vector_1+0xa2>
 190:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <encoderPosition>
 194:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <encoderPosition+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <encoderPosition+0x1>
 19e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <encoderPosition>

	lastEncoded = encoded;  // Store the current encoded value for the next iteration
 1a2:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <lastEncoded+0x1>
 1a6:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <lastEncoded>

	// Check if 10 steps have been completed
	if (encoderPosition % 10 == 0 && encoderPosition != 0) {
 1aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <encoderPosition>
 1ae:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <encoderPosition+0x1>
 1b2:	6a e0       	ldi	r22, 0x0A	; 10
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 1e 03 	call	0x63c	; 0x63c <__divmodhi4>
 1ba:	89 2b       	or	r24, r25
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <__vector_1+0xd2>
 1be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <encoderPosition>
 1c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <encoderPosition+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <__vector_1+0xd2>
		PORTB ^= (1 << PB5);  // Toggle the LED
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	89 27       	eor	r24, r25
 1d0:	85 b9       	out	0x05, r24	; 5
	}
}
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_13>:

ISR(TIMER1_OVF_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
	timer1_overflow_count++;
 202:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_overflow_count>
 206:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_overflow_count+0x1>
 20a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_overflow_count+0x2>
 20e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_overflow_count+0x3>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer1_overflow_count>
 21c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer1_overflow_count+0x1>
 220:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer1_overflow_count+0x2>
 224:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer1_overflow_count+0x3>
}
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <micros>:

unsigned long micros() {
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
 242:	2f b7       	in	r18, 0x3f	; 63
	cli();  // Disable interrupts temporarily
 244:	f8 94       	cli

	m = timer1_overflow_count;
 246:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer1_overflow_count>
 24a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer1_overflow_count+0x1>
 24e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer1_overflow_count+0x2>
 252:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer1_overflow_count+0x3>
	m = (m << 16) | TCNT1;
 256:	bc 01       	movw	r22, r24
 258:	55 27       	eor	r21, r21
 25a:	44 27       	eor	r20, r20
 25c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 260:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	7a 01       	movw	r14, r20
 26a:	8b 01       	movw	r16, r22
 26c:	e8 2a       	or	r14, r24
 26e:	f9 2a       	or	r15, r25
 270:	0a 2b       	or	r16, r26
 272:	1b 2b       	or	r17, r27
 274:	c8 01       	movw	r24, r16
 276:	b7 01       	movw	r22, r14

	SREG = oldSREG;  // Restore the global interrupt flag
 278:	2f bf       	out	0x3f, r18	; 63
	return m * (64.0 / (F_CPU / 1000000.0));
 27a:	0e 94 23 02 	call	0x446	; 0x446 <__floatunsisf>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	50 e4       	ldi	r21, 0x40	; 64
 286:	0e 94 89 02 	call	0x512	; 0x512 <__mulsf3>
 28a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fixunssfsi>
}
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <loop>:

void loop() {
 298:	4f 92       	push	r4
 29a:	5f 92       	push	r5
 29c:	6f 92       	push	r6
 29e:	7f 92       	push	r7
 2a0:	8f 92       	push	r8
 2a2:	9f 92       	push	r9
 2a4:	af 92       	push	r10
 2a6:	bf 92       	push	r11
 2a8:	cf 92       	push	r12
 2aa:	df 92       	push	r13
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
	if (encoderPosition < 20 && encoderPosition > -20) {  // Check if encoder position is within range
 2b8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <encoderPosition>
 2bc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <encoderPosition+0x1>
 2c0:	44 97       	sbiw	r24, 0x14	; 20
 2c2:	0c f0       	brlt	.+2      	; 0x2c6 <loop+0x2e>
 2c4:	75 c0       	rjmp	.+234    	; 0x3b0 <loop+0x118>
 2c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <encoderPosition>
 2ca:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <encoderPosition+0x1>
 2ce:	8d 3e       	cpi	r24, 0xED	; 237
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	0c f4       	brge	.+2      	; 0x2d6 <loop+0x3e>
 2d4:	6d c0       	rjmp	.+218    	; 0x3b0 <loop+0x118>
		const long interval1 = del1;
 2d6:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <del1>
 2da:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <del1+0x1>
		const long interval2 = del2;
 2de:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>

		bool stepState1 = false;
		bool stepState2 = false;

		for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	if (encoderPosition < 20 && encoderPosition > -20) {  // Check if encoder position is within range
		const long interval1 = del1;
		const long interval2 = del2;

		bool stepState1 = false;
		bool stepState2 = false;
 2ea:	81 2c       	mov	r8, r1
void loop() {
	if (encoderPosition < 20 && encoderPosition > -20) {  // Check if encoder position is within range
		const long interval1 = del1;
		const long interval2 = del2;

		bool stepState1 = false;
 2ec:	91 2c       	mov	r9, r1
		bool stepState2 = false;

		for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 2ee:	5b c0       	rjmp	.+182    	; 0x3a6 <loop+0x10e>
			unsigned long currentMicros1 = micros();
 2f0:	0e 94 1d 01 	call	0x23a	; 0x23a <micros>
 2f4:	6b 01       	movw	r12, r22
 2f6:	7c 01       	movw	r14, r24
			unsigned long currentMicros2 = micros();
 2f8:	0e 94 1d 01 	call	0x23a	; 0x23a <micros>

			if (currentMicros1 - previousMicros1 >= interval1) {
 2fc:	40 90 08 01 	lds	r4, 0x0108	; 0x800108 <previousMicros1>
 300:	50 90 09 01 	lds	r5, 0x0109	; 0x800109 <previousMicros1+0x1>
 304:	60 90 0a 01 	lds	r6, 0x010A	; 0x80010a <previousMicros1+0x2>
 308:	70 90 0b 01 	lds	r7, 0x010B	; 0x80010b <previousMicros1+0x3>
 30c:	a7 01       	movw	r20, r14
 30e:	96 01       	movw	r18, r12
 310:	24 19       	sub	r18, r4
 312:	35 09       	sbc	r19, r5
 314:	46 09       	sbc	r20, r6
 316:	57 09       	sbc	r21, r7
 318:	25 01       	movw	r4, r10
 31a:	0b 2c       	mov	r0, r11
 31c:	00 0c       	add	r0, r0
 31e:	66 08       	sbc	r6, r6
 320:	77 08       	sbc	r7, r7
 322:	24 15       	cp	r18, r4
 324:	35 05       	cpc	r19, r5
 326:	46 05       	cpc	r20, r6
 328:	57 05       	cpc	r21, r7
 32a:	90 f0       	brcs	.+36     	; 0x350 <loop+0xb8>
				previousMicros1 = currentMicros1;
 32c:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <previousMicros1>
 330:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <previousMicros1+0x1>
 334:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <previousMicros1+0x2>
 338:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <previousMicros1+0x3>

				stepState1 = !stepState1;
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	92 26       	eor	r9, r18

				if (stepState1) {
 340:	21 f0       	breq	.+8      	; 0x34a <loop+0xb2>
					PORTD |= (1 << stepPin1);  // Set stepPin1 HIGH
 342:	2b b1       	in	r18, 0x0b	; 11
 344:	20 62       	ori	r18, 0x20	; 32
 346:	2b b9       	out	0x0b, r18	; 11
 348:	03 c0       	rjmp	.+6      	; 0x350 <loop+0xb8>
					} else {
					PORTD &= ~(1 << stepPin1);  // Set stepPin1 LOW
 34a:	2b b1       	in	r18, 0x0b	; 11
 34c:	2f 7d       	andi	r18, 0xDF	; 223
 34e:	2b b9       	out	0x0b, r18	; 11
				}
			}

			if (currentMicros2 - previousMicros2 >= interval2) {
 350:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
 354:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
 358:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
 35c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
 360:	2b 01       	movw	r4, r22
 362:	3c 01       	movw	r6, r24
 364:	4c 18       	sub	r4, r12
 366:	5d 08       	sbc	r5, r13
 368:	6e 08       	sbc	r6, r14
 36a:	7f 08       	sbc	r7, r15
 36c:	68 01       	movw	r12, r16
 36e:	01 2e       	mov	r0, r17
 370:	00 0c       	add	r0, r0
 372:	ee 08       	sbc	r14, r14
 374:	ff 08       	sbc	r15, r15
 376:	4c 14       	cp	r4, r12
 378:	5d 04       	cpc	r5, r13
 37a:	6e 04       	cpc	r6, r14
 37c:	7f 04       	cpc	r7, r15
 37e:	90 f0       	brcs	.+36     	; 0x3a4 <loop+0x10c>
				previousMicros2 = currentMicros2;
 380:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 384:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 388:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 38c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>

				stepState2 = !stepState2;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	88 26       	eor	r8, r24

				if (stepState2) {
 394:	21 f0       	breq	.+8      	; 0x39e <loop+0x106>
					PORTD |= (1 << stepPin2);  // Set stepPin2 HIGH
 396:	8b b1       	in	r24, 0x0b	; 11
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	8b b9       	out	0x0b, r24	; 11
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <loop+0x10c>
					} else {
					PORTD &= ~(1 << stepPin2);  // Set stepPin2 LOW
 39e:	8b b1       	in	r24, 0x0b	; 11
 3a0:	8f 77       	andi	r24, 0x7F	; 127
 3a2:	8b b9       	out	0x0b, r24	; 11
		const long interval2 = del2;

		bool stepState1 = false;
		bool stepState2 = false;

		for (int i = 0; i < stepsPerRevolution1 * 1; i++) {
 3a4:	21 96       	adiw	r28, 0x01	; 1
 3a6:	c8 3c       	cpi	r28, 0xC8	; 200
 3a8:	d1 05       	cpc	r29, r1
 3aa:	0c f4       	brge	.+2      	; 0x3ae <loop+0x116>
 3ac:	a1 cf       	rjmp	.-190    	; 0x2f0 <loop+0x58>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <loop+0x124>
					PORTD &= ~(1 << stepPin2);  // Set stepPin2 LOW
				}
			}
		}
		} else {
		PORTD &= ~(1 << stepPin1);  // Stop motor 1
 3b0:	8b b1       	in	r24, 0x0b	; 11
 3b2:	8f 7d       	andi	r24, 0xDF	; 223
 3b4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << stepPin2);  // Stop motor 2
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	8f 77       	andi	r24, 0x7F	; 127
 3ba:	8b b9       	out	0x0b, r24	; 11
	}
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	7f 90       	pop	r7
 3d6:	6f 90       	pop	r6
 3d8:	5f 90       	pop	r5
 3da:	4f 90       	pop	r4
 3dc:	08 95       	ret

000003de <main>:

int main(void) {
	setup();
 3de:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>

	while (1) {
		loop();
 3e2:	0e 94 4c 01 	call	0x298	; 0x298 <loop>
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <main+0x4>

000003e8 <__fixunssfsi>:
 3e8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_splitA>
 3ec:	88 f0       	brcs	.+34     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ee:	9f 57       	subi	r25, 0x7F	; 127
 3f0:	98 f0       	brcs	.+38     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f2:	b9 2f       	mov	r27, r25
 3f4:	99 27       	eor	r25, r25
 3f6:	b7 51       	subi	r27, 0x17	; 23
 3f8:	b0 f0       	brcs	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a f0       	brmi	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 406:	ba 95       	dec	r27
 408:	c9 f7       	brne	.-14     	; 0x3fc <__fixunssfsi+0x14>
 40a:	14 c0       	rjmp	.+40     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40c:	b1 30       	cpi	r27, 0x01	; 1
 40e:	91 f0       	breq	.+36     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 410:	0e 94 82 02 	call	0x504	; 0x504 <__fp_zero>
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	08 95       	ret
 418:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_zero>
 41c:	67 2f       	mov	r22, r23
 41e:	78 2f       	mov	r23, r24
 420:	88 27       	eor	r24, r24
 422:	b8 5f       	subi	r27, 0xF8	; 248
 424:	39 f0       	breq	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 426:	b9 3f       	cpi	r27, 0xF9	; 249
 428:	cc f3       	brlt	.-14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 42a:	86 95       	lsr	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b3 95       	inc	r27
 432:	d9 f7       	brne	.-10     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 434:	3e f4       	brtc	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 436:	90 95       	com	r25
 438:	80 95       	com	r24
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__floatunsisf>:
 446:	e8 94       	clt
 448:	09 c0       	rjmp	.+18     	; 0x45c <__floatsisf+0x12>

0000044a <__floatsisf>:
 44a:	97 fb       	bst	r25, 7
 44c:	3e f4       	brtc	.+14     	; 0x45c <__floatsisf+0x12>
 44e:	90 95       	com	r25
 450:	80 95       	com	r24
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	99 23       	and	r25, r25
 45e:	a9 f0       	breq	.+42     	; 0x48a <__floatsisf+0x40>
 460:	f9 2f       	mov	r31, r25
 462:	96 e9       	ldi	r25, 0x96	; 150
 464:	bb 27       	eor	r27, r27
 466:	93 95       	inc	r25
 468:	f6 95       	lsr	r31
 46a:	87 95       	ror	r24
 46c:	77 95       	ror	r23
 46e:	67 95       	ror	r22
 470:	b7 95       	ror	r27
 472:	f1 11       	cpse	r31, r1
 474:	f8 cf       	rjmp	.-16     	; 0x466 <__floatsisf+0x1c>
 476:	fa f4       	brpl	.+62     	; 0x4b6 <__floatsisf+0x6c>
 478:	bb 0f       	add	r27, r27
 47a:	11 f4       	brne	.+4      	; 0x480 <__floatsisf+0x36>
 47c:	60 ff       	sbrs	r22, 0
 47e:	1b c0       	rjmp	.+54     	; 0x4b6 <__floatsisf+0x6c>
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8f 4f       	sbci	r24, 0xFF	; 255
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	16 c0       	rjmp	.+44     	; 0x4b6 <__floatsisf+0x6c>
 48a:	88 23       	and	r24, r24
 48c:	11 f0       	breq	.+4      	; 0x492 <__floatsisf+0x48>
 48e:	96 e9       	ldi	r25, 0x96	; 150
 490:	11 c0       	rjmp	.+34     	; 0x4b4 <__floatsisf+0x6a>
 492:	77 23       	and	r23, r23
 494:	21 f0       	breq	.+8      	; 0x49e <__floatsisf+0x54>
 496:	9e e8       	ldi	r25, 0x8E	; 142
 498:	87 2f       	mov	r24, r23
 49a:	76 2f       	mov	r23, r22
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__floatsisf+0x5e>
 49e:	66 23       	and	r22, r22
 4a0:	71 f0       	breq	.+28     	; 0x4be <__floatsisf+0x74>
 4a2:	96 e8       	ldi	r25, 0x86	; 134
 4a4:	86 2f       	mov	r24, r22
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	2a f0       	brmi	.+10     	; 0x4b6 <__floatsisf+0x6c>
 4ac:	9a 95       	dec	r25
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	da f7       	brpl	.-10     	; 0x4ac <__floatsisf+0x62>
 4b6:	88 0f       	add	r24, r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret

000004c0 <__fp_split3>:
 4c0:	57 fd       	sbrc	r21, 7
 4c2:	90 58       	subi	r25, 0x80	; 128
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	59 f0       	breq	.+22     	; 0x4e0 <__fp_splitA+0x10>
 4ca:	5f 3f       	cpi	r21, 0xFF	; 255
 4cc:	71 f0       	breq	.+28     	; 0x4ea <__fp_splitA+0x1a>
 4ce:	47 95       	ror	r20

000004d0 <__fp_splitA>:
 4d0:	88 0f       	add	r24, r24
 4d2:	97 fb       	bst	r25, 7
 4d4:	99 1f       	adc	r25, r25
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <__fp_splitA+0x20>
 4d8:	9f 3f       	cpi	r25, 0xFF	; 255
 4da:	79 f0       	breq	.+30     	; 0x4fa <__fp_splitA+0x2a>
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret
 4e0:	12 16       	cp	r1, r18
 4e2:	13 06       	cpc	r1, r19
 4e4:	14 06       	cpc	r1, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <__fp_split3+0xe>
 4ea:	46 95       	lsr	r20
 4ec:	f1 df       	rcall	.-30     	; 0x4d0 <__fp_splitA>
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <__fp_splitA+0x30>
 4f0:	16 16       	cp	r1, r22
 4f2:	17 06       	cpc	r1, r23
 4f4:	18 06       	cpc	r1, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	f1 cf       	rjmp	.-30     	; 0x4dc <__fp_splitA+0xc>
 4fa:	86 95       	lsr	r24
 4fc:	71 05       	cpc	r23, r1
 4fe:	61 05       	cpc	r22, r1
 500:	08 94       	sec
 502:	08 95       	ret

00000504 <__fp_zero>:
 504:	e8 94       	clt

00000506 <__fp_szero>:
 506:	bb 27       	eor	r27, r27
 508:	66 27       	eor	r22, r22
 50a:	77 27       	eor	r23, r23
 50c:	cb 01       	movw	r24, r22
 50e:	97 f9       	bld	r25, 7
 510:	08 95       	ret

00000512 <__mulsf3>:
 512:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3x>
 516:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 51a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 51e:	38 f0       	brcs	.+14     	; 0x52e <__mulsf3+0x1c>
 520:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 524:	20 f0       	brcs	.+8      	; 0x52e <__mulsf3+0x1c>
 526:	95 23       	and	r25, r21
 528:	11 f0       	breq	.+4      	; 0x52e <__mulsf3+0x1c>
 52a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 52e:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 532:	11 24       	eor	r1, r1
 534:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_szero>

00000538 <__mulsf3x>:
 538:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_split3>
 53c:	70 f3       	brcs	.-36     	; 0x51a <__mulsf3+0x8>

0000053e <__mulsf3_pse>:
 53e:	95 9f       	mul	r25, r21
 540:	c1 f3       	breq	.-16     	; 0x532 <__mulsf3+0x20>
 542:	95 0f       	add	r25, r21
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	55 1f       	adc	r21, r21
 548:	62 9f       	mul	r22, r18
 54a:	f0 01       	movw	r30, r0
 54c:	72 9f       	mul	r23, r18
 54e:	bb 27       	eor	r27, r27
 550:	f0 0d       	add	r31, r0
 552:	b1 1d       	adc	r27, r1
 554:	63 9f       	mul	r22, r19
 556:	aa 27       	eor	r26, r26
 558:	f0 0d       	add	r31, r0
 55a:	b1 1d       	adc	r27, r1
 55c:	aa 1f       	adc	r26, r26
 55e:	64 9f       	mul	r22, r20
 560:	66 27       	eor	r22, r22
 562:	b0 0d       	add	r27, r0
 564:	a1 1d       	adc	r26, r1
 566:	66 1f       	adc	r22, r22
 568:	82 9f       	mul	r24, r18
 56a:	22 27       	eor	r18, r18
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	62 1f       	adc	r22, r18
 572:	73 9f       	mul	r23, r19
 574:	b0 0d       	add	r27, r0
 576:	a1 1d       	adc	r26, r1
 578:	62 1f       	adc	r22, r18
 57a:	83 9f       	mul	r24, r19
 57c:	a0 0d       	add	r26, r0
 57e:	61 1d       	adc	r22, r1
 580:	22 1f       	adc	r18, r18
 582:	74 9f       	mul	r23, r20
 584:	33 27       	eor	r19, r19
 586:	a0 0d       	add	r26, r0
 588:	61 1d       	adc	r22, r1
 58a:	23 1f       	adc	r18, r19
 58c:	84 9f       	mul	r24, r20
 58e:	60 0d       	add	r22, r0
 590:	21 1d       	adc	r18, r1
 592:	82 2f       	mov	r24, r18
 594:	76 2f       	mov	r23, r22
 596:	6a 2f       	mov	r22, r26
 598:	11 24       	eor	r1, r1
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	9a f0       	brmi	.+38     	; 0x5c6 <__mulsf3_pse+0x88>
 5a0:	f1 f0       	breq	.+60     	; 0x5de <__mulsf3_pse+0xa0>
 5a2:	88 23       	and	r24, r24
 5a4:	4a f0       	brmi	.+18     	; 0x5b8 <__mulsf3_pse+0x7a>
 5a6:	ee 0f       	add	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	bb 1f       	adc	r27, r27
 5ac:	66 1f       	adc	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	91 50       	subi	r25, 0x01	; 1
 5b4:	50 40       	sbci	r21, 0x00	; 0
 5b6:	a9 f7       	brne	.-22     	; 0x5a2 <__mulsf3_pse+0x64>
 5b8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ba:	51 05       	cpc	r21, r1
 5bc:	80 f0       	brcs	.+32     	; 0x5de <__mulsf3_pse+0xa0>
 5be:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 5c2:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_szero>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	e4 f3       	brlt	.-8      	; 0x5c2 <__mulsf3_pse+0x84>
 5ca:	98 3e       	cpi	r25, 0xE8	; 232
 5cc:	d4 f3       	brlt	.-12     	; 0x5c2 <__mulsf3_pse+0x84>
 5ce:	86 95       	lsr	r24
 5d0:	77 95       	ror	r23
 5d2:	67 95       	ror	r22
 5d4:	b7 95       	ror	r27
 5d6:	f7 95       	ror	r31
 5d8:	e7 95       	ror	r30
 5da:	9f 5f       	subi	r25, 0xFF	; 255
 5dc:	c1 f7       	brne	.-16     	; 0x5ce <__mulsf3_pse+0x90>
 5de:	fe 2b       	or	r31, r30
 5e0:	88 0f       	add	r24, r24
 5e2:	91 1d       	adc	r25, r1
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__divmodhi4>:
 63c:	97 fb       	bst	r25, 7
 63e:	07 2e       	mov	r0, r23
 640:	16 f4       	brtc	.+4      	; 0x646 <__divmodhi4+0xa>
 642:	00 94       	com	r0
 644:	07 d0       	rcall	.+14     	; 0x654 <__divmodhi4_neg1>
 646:	77 fd       	sbrc	r23, 7
 648:	09 d0       	rcall	.+18     	; 0x65c <__divmodhi4_neg2>
 64a:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 64e:	07 fc       	sbrc	r0, 7
 650:	05 d0       	rcall	.+10     	; 0x65c <__divmodhi4_neg2>
 652:	3e f4       	brtc	.+14     	; 0x662 <__divmodhi4_exit>

00000654 <__divmodhi4_neg1>:
 654:	90 95       	com	r25
 656:	81 95       	neg	r24
 658:	9f 4f       	sbci	r25, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__divmodhi4_neg2>:
 65c:	70 95       	com	r23
 65e:	61 95       	neg	r22
 660:	7f 4f       	sbci	r23, 0xFF	; 255

00000662 <__divmodhi4_exit>:
 662:	08 95       	ret

00000664 <__udivmodhi4>:
 664:	aa 1b       	sub	r26, r26
 666:	bb 1b       	sub	r27, r27
 668:	51 e1       	ldi	r21, 0x11	; 17
 66a:	07 c0       	rjmp	.+14     	; 0x67a <__udivmodhi4_ep>

0000066c <__udivmodhi4_loop>:
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	a6 17       	cp	r26, r22
 672:	b7 07       	cpc	r27, r23
 674:	10 f0       	brcs	.+4      	; 0x67a <__udivmodhi4_ep>
 676:	a6 1b       	sub	r26, r22
 678:	b7 0b       	sbc	r27, r23

0000067a <__udivmodhi4_ep>:
 67a:	88 1f       	adc	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	5a 95       	dec	r21
 680:	a9 f7       	brne	.-22     	; 0x66c <__udivmodhi4_loop>
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	bc 01       	movw	r22, r24
 688:	cd 01       	movw	r24, r26
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
