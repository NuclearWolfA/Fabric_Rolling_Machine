
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080017e  0080017e  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e27  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059a  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000582  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 39       	cpi	r26, 0x90	; 144
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  9e:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <get_keypad_key>:
		case 'D': lcd_string("Other"); break;
	}
}

// Function to get the pressed key from the keypad
char get_keypad_key() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	const char hexaKeys[4][4] = {
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <get_keypad_key+0x1e>
		{'C', '9', '8', '7'},
		{'B', '6', '5', '4'},
		{'A', '3', '2', '1'}
	};

	for (uint8_t r = 0; r < 4; r++) {
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	41 c0       	rjmp	.+130    	; 0x152 <get_keypad_key+0xac>
		PORTD &= ~(1 << (row0 + r));  // Set current row to LOW
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	63 2f       	mov	r22, r19
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	03 2e       	mov	r0, r19
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_keypad_key+0x3c>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <get_keypad_key+0x38>
  e6:	e4 2f       	mov	r30, r20
  e8:	94 2f       	mov	r25, r20
  ea:	90 95       	com	r25
  ec:	89 23       	and	r24, r25
  ee:	8b b9       	out	0x0b, r24	; 11
		for (uint8_t c = 0; c < 4; c++) {
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	29 c0       	rjmp	.+82     	; 0x146 <get_keypad_key+0xa0>
			if (!(PINC & (1 << (col0 + c)))) {  // Check if column is LOW
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	a2 2f       	mov	r26, r18
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <get_keypad_key+0x5e>
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <get_keypad_key+0x5a>
 108:	80 fd       	sbrc	r24, 0
 10a:	1c c0       	rjmp	.+56     	; 0x144 <get_keypad_key+0x9e>
				while (!(PINC & (1 << (col0 + c))));  // Wait until the key is released
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0a 2e       	mov	r0, r26
 112:	02 c0       	rjmp	.+4      	; 0x118 <get_keypad_key+0x72>
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <get_keypad_key+0x6e>
 11c:	80 ff       	sbrs	r24, 0
 11e:	f6 cf       	rjmp	.-20     	; 0x10c <get_keypad_key+0x66>
				PORTD |= (1 << (row0 + r));  // Set row back to HIGH
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	e8 2b       	or	r30, r24
 124:	eb b9       	out	0x0b, r30	; 11
				return hexaKeys[r][c];  // Return corresponding key
 126:	fb 01       	movw	r30, r22
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	8c 0f       	add	r24, r28
 136:	9d 1f       	adc	r25, r29
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	ea 0f       	add	r30, r26
 13e:	fb 1f       	adc	r31, r27
 140:	80 81       	ld	r24, Z
 142:	0b c0       	rjmp	.+22     	; 0x15a <get_keypad_key+0xb4>
		{'A', '3', '2', '1'}
	};

	for (uint8_t r = 0; r < 4; r++) {
		PORTD &= ~(1 << (row0 + r));  // Set current row to LOW
		for (uint8_t c = 0; c < 4; c++) {
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	24 30       	cpi	r18, 0x04	; 4
 148:	a8 f2       	brcs	.-86     	; 0xf4 <get_keypad_key+0x4e>
				while (!(PINC & (1 << (col0 + c))));  // Wait until the key is released
				PORTD |= (1 << (row0 + r));  // Set row back to HIGH
				return hexaKeys[r][c];  // Return corresponding key
			}
		}
		PORTD |= (1 << (row0 + r));  // Set row back to HIGH
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	48 2b       	or	r20, r24
 14e:	4b b9       	out	0x0b, r20	; 11
		{'C', '9', '8', '7'},
		{'B', '6', '5', '4'},
		{'A', '3', '2', '1'}
	};

	for (uint8_t r = 0; r < 4; r++) {
 150:	3f 5f       	subi	r19, 0xFF	; 255
 152:	34 30       	cpi	r19, 0x04	; 4
 154:	08 f4       	brcc	.+2      	; 0x158 <get_keypad_key+0xb2>
 156:	bc cf       	rjmp	.-136    	; 0xd0 <get_keypad_key+0x2a>
				return hexaKeys[r][c];  // Return corresponding key
			}
		}
		PORTD |= (1 << (row0 + r));  // Set row back to HIGH
	}
	return '\0';  // No key pressed
 158:	80 e0       	ldi	r24, 0x00	; 0
}
 15a:	60 96       	adiw	r28, 0x10	; 16
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_command>:

void lcd_command(unsigned char cmnd) {
	PORTD = (PORTD & 0x3F) | (0 << rs);  // RS = 0 for command mode
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	9f 73       	andi	r25, 0x3F	; 63
 170:	9b b9       	out	0x0b, r25	; 11
	PORTB = (PORTB & 0xF0) | (cmnd >> 4);  // Send upper nibble
 172:	95 b1       	in	r25, 0x05	; 5
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	28 2f       	mov	r18, r24
 178:	22 95       	swap	r18
 17a:	2f 70       	andi	r18, 0x0F	; 15
 17c:	92 2b       	or	r25, r18
 17e:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << en); _delay_us(1); PORTD &= ~(1 << en); _delay_us(200);
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	90 68       	ori	r25, 0x80	; 128
 184:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	95 e0       	ldi	r25, 0x05	; 5
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_command+0x1c>
 18c:	00 00       	nop
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	9f 77       	andi	r25, 0x7F	; 127
 192:	9b b9       	out	0x0b, r25	; 11
 194:	ef e1       	ldi	r30, 0x1F	; 31
 196:	f3 e0       	ldi	r31, 0x03	; 3
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_command+0x2c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_command+0x32>
 19e:	00 00       	nop
	PORTB = (PORTB & 0xF0) | (cmnd & 0x0F);  // Send lower nibble
 1a0:	95 b1       	in	r25, 0x05	; 5
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	89 2b       	or	r24, r25
 1a8:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << en); _delay_us(1); PORTD &= ~(1 << en); _delay_ms(2);
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	fa 95       	dec	r31
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_command+0x46>
 1b6:	00 00       	nop
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9f e1       	ldi	r25, 0x1F	; 31
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_command+0x56>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_command+0x5c>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <lcd_clear>:
}

void lcd_clear() {
	lcd_command(0x01);  // Clear display
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_clear+0xa>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_clear+0x10>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <lcd_char>:
	_delay_ms(2);
}

void lcd_char(unsigned char data) {
	PORTD = (PORTD & 0x3F) | (1 << rs);  // RS = 1 for data mode
 1e0:	9b b1       	in	r25, 0x0b	; 11
 1e2:	9f 73       	andi	r25, 0x3F	; 63
 1e4:	90 64       	ori	r25, 0x40	; 64
 1e6:	9b b9       	out	0x0b, r25	; 11
	PORTB = (PORTB & 0xF0) | (data >> 4);  // Send upper nibble
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	90 7f       	andi	r25, 0xF0	; 240
 1ec:	28 2f       	mov	r18, r24
 1ee:	22 95       	swap	r18
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	92 2b       	or	r25, r18
 1f4:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1 << en); _delay_us(1); PORTD &= ~(1 << en); _delay_us(200);
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	90 68       	ori	r25, 0x80	; 128
 1fa:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	95 e0       	ldi	r25, 0x05	; 5
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_char+0x1e>
 202:	00 00       	nop
 204:	9b b1       	in	r25, 0x0b	; 11
 206:	9f 77       	andi	r25, 0x7F	; 127
 208:	9b b9       	out	0x0b, r25	; 11
 20a:	ef e1       	ldi	r30, 0x1F	; 31
 20c:	f3 e0       	ldi	r31, 0x03	; 3
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_char+0x2e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_char+0x34>
 214:	00 00       	nop
	PORTB = (PORTB & 0xF0) | (data & 0x0F);  // Send lower nibble
 216:	95 b1       	in	r25, 0x05	; 5
 218:	90 7f       	andi	r25, 0xF0	; 240
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	89 2b       	or	r24, r25
 21e:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << en); _delay_us(1); PORTD &= ~(1 << en); _delay_ms(2);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	80 68       	ori	r24, 0x80	; 128
 224:	8b b9       	out	0x0b, r24	; 11
 226:	f5 e0       	ldi	r31, 0x05	; 5
 228:	fa 95       	dec	r31
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_char+0x48>
 22c:	00 00       	nop
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	8f 77       	andi	r24, 0x7F	; 127
 232:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9f e1       	ldi	r25, 0x1F	; 31
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_char+0x58>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_char+0x5e>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <lcd_string>:
}

void lcd_string(const char *str) {
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
	while (*str) lcd_char(*str++);
 248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_char>
 250:	88 81       	ld	r24, Y
 252:	81 11       	cpse	r24, r1
 254:	fa cf       	rjmp	.-12     	; 0x24a <lcd_string+0x8>
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <fabricSelect>:
		_delay_ms(5000);
		lcd_clear();
	}
}

void fabricSelect(char customKey) {
 25c:	cf 93       	push	r28
 25e:	c8 2f       	mov	r28, r24
	fabric = customKey;
 260:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <fabric>
	lcd_clear();
 264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
	switch (customKey) {
 268:	c2 34       	cpi	r28, 0x42	; 66
 26a:	71 f0       	breq	.+28     	; 0x288 <fabricSelect+0x2c>
 26c:	18 f4       	brcc	.+6      	; 0x274 <fabricSelect+0x18>
 26e:	c1 34       	cpi	r28, 0x41	; 65
 270:	31 f0       	breq	.+12     	; 0x27e <fabricSelect+0x22>
 272:	18 c0       	rjmp	.+48     	; 0x2a4 <fabricSelect+0x48>
 274:	c3 34       	cpi	r28, 0x43	; 67
 276:	69 f0       	breq	.+26     	; 0x292 <fabricSelect+0x36>
 278:	c4 34       	cpi	r28, 0x44	; 68
 27a:	81 f0       	breq	.+32     	; 0x29c <fabricSelect+0x40>
 27c:	13 c0       	rjmp	.+38     	; 0x2a4 <fabricSelect+0x48>
		case 'A': lcd_string("Cotton"); break;
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 286:	0e c0       	rjmp	.+28     	; 0x2a4 <fabricSelect+0x48>
		case 'B': lcd_string("Silk"); break;
 288:	87 e1       	ldi	r24, 0x17	; 23
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <fabricSelect+0x48>
		case 'C': lcd_string("Linen"); break;
 292:	8c e1       	ldi	r24, 0x1C	; 28
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <fabricSelect+0x48>
		case 'D': lcd_string("Other"); break;
 29c:	81 e5       	ldi	r24, 0x51	; 81
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
	}
}
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <lcd_init>:
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <lcd_init+0x6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x10>
 2b8:	00 00       	nop
	while (*str) lcd_char(*str++);
}

void lcd_init() {
	_delay_ms(20);
	lcd_command(0x02);  // Initialize LCD in 4-bit mode
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
	lcd_command(0x28);  // 2 lines, 5x7 matrix
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
	lcd_command(0x0C);  // Display ON, Cursor OFF
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
	lcd_command(0x06);  // Increment cursor
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
	lcd_clear();  // Clear display
 2d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
 2d6:	08 95       	ret

000002d8 <main>:
char get_keypad_key();
void fabricSelect(char customKey);

int main(void) {
	// Set LCD pins as output
	DDRD |= (1 << rs) | (1 << en);
 2d8:	8a b1       	in	r24, 0x0a	; 10
 2da:	80 6c       	ori	r24, 0xC0	; 192
 2dc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << d4) | (1 << d5) | (1 << d6) | (1 << d7) | (1 << ct);
 2de:	84 b1       	in	r24, 0x04	; 4
 2e0:	8f 61       	ori	r24, 0x1F	; 31
 2e2:	84 b9       	out	0x04, r24	; 4
	
	// Set keypad rows as output and columns as input
	DDRD |= (1 << row0) | (1 << row1) | (1 << row2) | (1 << row3);
 2e4:	8a b1       	in	r24, 0x0a	; 10
 2e6:	8f 60       	ori	r24, 0x0F	; 15
 2e8:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~((1 << col0) | (1 << col1) | (1 << col2) | (1 << col3));
 2ea:	87 b1       	in	r24, 0x07	; 7
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << col0) | (1 << col1) | (1 << col2) | (1 << col3); // Enable pull-ups
 2f0:	88 b1       	in	r24, 0x08	; 8
 2f2:	8f 60       	ori	r24, 0x0F	; 15
 2f4:	88 b9       	out	0x08, r24	; 8

	// Initialize LCD and motor control
	lcd_init();
 2f6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_init>
	OCR0A = 90;  // Motor control (PWM output)
 2fa:	8a e5       	ldi	r24, 0x5A	; 90
 2fc:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0A1);
 2fe:	83 e8       	ldi	r24, 0x83	; 131
 300:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01);  // Set prescaler to 8
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	85 bd       	out	0x25, r24	; 37

	// Display startup message
	lcd_string("  PrecisionRoll   ");
 306:	82 e2       	ldi	r24, 0x22	; 34
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	37 ea       	ldi	r19, 0xA7	; 167
 312:	81 e6       	ldi	r24, 0x61	; 97
 314:	21 50       	subi	r18, 0x01	; 1
 316:	30 40       	sbci	r19, 0x00	; 0
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x3c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x46>
 31e:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();
 320:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>

	while (1) {
		lcd_string("A:Cotton B:Silk ");
 324:	85 e3       	ldi	r24, 0x35	; 53
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
		lcd_command(0xC0);  // Move cursor to second line
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
		lcd_string("C:Linen  D:Other");
 332:	86 e4       	ldi	r24, 0x46	; 70
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>

		uint8_t fabricSel = 0;
 33a:	c0 e0       	ldi	r28, 0x00	; 0
		while (!fabricSel) {
 33c:	42 c0       	rjmp	.+132    	; 0x3c2 <main+0xea>
			char customKey = get_keypad_key();
 33e:	0e 94 53 00 	call	0xa6	; 0xa6 <get_keypad_key>
			if (customKey == 'A' || customKey == 'B' || customKey == 'C' || customKey == 'D') {
 342:	9f eb       	ldi	r25, 0xBF	; 191
 344:	98 0f       	add	r25, r24
 346:	94 30       	cpi	r25, 0x04	; 4
 348:	e0 f5       	brcc	.+120    	; 0x3c2 <main+0xea>
				fabricSelect(customKey);
 34a:	0e 94 2e 01 	call	0x25c	; 0x25c <fabricSelect>

				uint8_t confirmed = 0;
 34e:	d0 e0       	ldi	r29, 0x00	; 0
				while (!confirmed) {
 350:	0d c0       	rjmp	.+26     	; 0x36c <main+0x94>
					customKey = get_keypad_key();
 352:	0e 94 53 00 	call	0xa6	; 0xa6 <get_keypad_key>
 356:	c8 2f       	mov	r28, r24
					if (customKey == 'A' || customKey == 'B' || customKey == 'C' || customKey == 'D') {
 358:	8f eb       	ldi	r24, 0xBF	; 191
 35a:	8c 0f       	add	r24, r28
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	18 f4       	brcc	.+6      	; 0x366 <main+0x8e>
						fabricSelect(customKey);
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 2e 01 	call	0x25c	; 0x25c <fabricSelect>
					}

					if (customKey == '#') {
 366:	c3 32       	cpi	r28, 0x23	; 35
 368:	09 f4       	brne	.+2      	; 0x36c <main+0x94>
						confirmed = 1;
 36a:	d1 e0       	ldi	r29, 0x01	; 1
			char customKey = get_keypad_key();
			if (customKey == 'A' || customKey == 'B' || customKey == 'C' || customKey == 'D') {
				fabricSelect(customKey);

				uint8_t confirmed = 0;
				while (!confirmed) {
 36c:	dd 23       	and	r29, r29
 36e:	89 f3       	breq	.-30     	; 0x352 <main+0x7a>
					if (customKey == '#') {
						confirmed = 1;
					}
				}

				lcd_clear();
 370:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
				lcd_string("Length: ");
 374:	87 e5       	ldi	r24, 0x57	; 87
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
				len_idx = 0;
 37c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
				while (1) {
					customKey = get_keypad_key();
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <get_keypad_key>
						length[len_idx++] = customKey;
						lcd_char(customKey);
					}
				}

				fabricSel = 1;
 384:	c1 e0       	ldi	r28, 0x01	; 1
				lcd_clear();
				lcd_string("Length: ");
				len_idx = 0;
				while (1) {
					customKey = get_keypad_key();
					if (customKey == '#') break;
 386:	83 32       	cpi	r24, 0x23	; 35
 388:	e1 f0       	breq	.+56     	; 0x3c2 <main+0xea>
					if (customKey == '*') {
 38a:	8a 32       	cpi	r24, 0x2A	; 42
 38c:	49 f4       	brne	.+18     	; 0x3a0 <main+0xc8>
						len_idx = 0;
 38e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
						lcd_clear();
 392:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
						lcd_string("Length: ");
 396:	87 e5       	ldi	r24, 0x57	; 87
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
						continue;
 39e:	f0 cf       	rjmp	.-32     	; 0x380 <main+0xa8>
					}
					if (customKey >= '0' && customKey <= '9') {
 3a0:	90 ed       	ldi	r25, 0xD0	; 208
 3a2:	98 0f       	add	r25, r24
 3a4:	9a 30       	cpi	r25, 0x0A	; 10
 3a6:	60 f7       	brcc	.-40     	; 0x380 <main+0xa8>
						length[len_idx++] = customKey;
 3a8:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__data_end>
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	9e 0f       	add	r25, r30
 3b0:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <__data_end>
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	e1 58       	subi	r30, 0x81	; 129
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	80 83       	st	Z, r24
						lcd_char(customKey);
 3bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_char>
 3c0:	df cf       	rjmp	.-66     	; 0x380 <main+0xa8>
		lcd_string("A:Cotton B:Silk ");
		lcd_command(0xC0);  // Move cursor to second line
		lcd_string("C:Linen  D:Other");

		uint8_t fabricSel = 0;
		while (!fabricSel) {
 3c2:	cc 23       	and	r28, r28
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <main+0xf0>
 3c6:	bb cf       	rjmp	.-138    	; 0x33e <main+0x66>

				fabricSel = 1;
			}
		}

		lcd_clear();
 3c8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
		lcd_string("   Rolling...  ");
 3cc:	80 e6       	ldi	r24, 0x60	; 96
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 3d4:	9a ea       	ldi	r25, 0xAA	; 170
 3d6:	26 ee       	ldi	r18, 0xE6	; 230
 3d8:	36 e9       	ldi	r19, 0x96	; 150
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	20 40       	sbci	r18, 0x00	; 0
 3e0:	30 40       	sbci	r19, 0x00	; 0
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <main+0x104>
 3e6:	00 00       	nop
		_delay_ms(10000);

		// Insert motor control code here using length value

		lcd_clear();
 3e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
		lcd_string("    Finished.");
 3ec:	80 e7       	ldi	r24, 0x70	; 112
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	23 e2       	ldi	r18, 0x23	; 35
 3f8:	34 ef       	ldi	r19, 0xF4	; 244
 3fa:	91 50       	subi	r25, 0x01	; 1
 3fc:	20 40       	sbci	r18, 0x00	; 0
 3fe:	30 40       	sbci	r19, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x122>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
		_delay_ms(5000);
		lcd_clear();
 406:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clear>
	}
 40a:	8c cf       	rjmp	.-232    	; 0x324 <main+0x4c>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
