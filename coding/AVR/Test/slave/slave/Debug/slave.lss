
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000494  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800104  00800104  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4c  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000772  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f2  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  9e:	0c 94 48 02 	jmp	0x490	; 0x490 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:

char receivedFabric[10] = "";
char receivedLength[10] = "";

// Timer1 overflow interrupt service routine
ISR(TIMER1_OVF_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
	timer1_overflow_count++;
  b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer1_overflow_count>
  bc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer1_overflow_count+0x1>
  c0:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timer1_overflow_count+0x2>
  c4:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timer1_overflow_count+0x3>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer1_overflow_count>
  d2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timer1_overflow_count+0x1>
  d6:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <timer1_overflow_count+0x2>
  da:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <timer1_overflow_count+0x3>
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <timer1_init>:

void timer1_init() {
	TCCR1B |= (1 << CS10); // No prescaling
  f0:	e1 e8       	ldi	r30, 0x81	; 129
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1); // Enable Timer1 overflow interrupt
  fa:	ef e6       	ldi	r30, 0x6F	; 111
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
	sei(); // Enable global interrupts
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <micros>:
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG;
 108:	4f b7       	in	r20, 0x3f	; 63

	cli(); // Disable interrupts
 10a:	f8 94       	cli
	m = timer1_overflow_count;
 10c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer1_overflow_count>
 110:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer1_overflow_count+0x1>
 114:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timer1_overflow_count+0x2>
 118:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timer1_overflow_count+0x3>
	uint16_t t = TCNT1;
 11c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 120:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	SREG = oldSREG; // Restore interrupts
 124:	4f bf       	out	0x3f, r20	; 63

	return ((m << 16) + t) / (F_CPU / 1000000UL);
 126:	dc 01       	movw	r26, r24
 128:	99 27       	eor	r25, r25
 12a:	88 27       	eor	r24, r24
 12c:	82 0f       	add	r24, r18
 12e:	93 1f       	adc	r25, r19
 130:	a1 1d       	adc	r26, r1
 132:	b1 1d       	adc	r27, r1
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	68 94       	set
 13a:	13 f8       	bld	r1, 3
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	77 95       	ror	r23
 142:	67 95       	ror	r22
 144:	16 94       	lsr	r1
 146:	d1 f7       	brne	.-12     	; 0x13c <micros+0x34>
}
 148:	08 95       	ret

0000014a <controlMotors>:
			USART_Transmit('a');
		}
	}
}

void controlMotors(int rotations) {
 14a:	4f 92       	push	r4
 14c:	5f 92       	push	r5
 14e:	6f 92       	push	r6
 150:	7f 92       	push	r7
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	2a 97       	sbiw	r28, 0x0a	; 10
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
	// Number of steps to rotate based on the received length
	steps1 = 0;
 17a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <steps1+0x1>
 17e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <steps1>
	steps2 = 0;
 182:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <steps2+0x1>
 186:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <steps2>

	unsigned long interval1 = del1; // Microseconds for motor 1
 18a:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <del1>
 18e:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <del1+0x1>
 192:	05 2c       	mov	r0, r5
 194:	00 0c       	add	r0, r0
 196:	66 08       	sbc	r6, r6
 198:	77 08       	sbc	r7, r7
	unsigned long interval2 = del2; // Microseconds for motor 2
 19a:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	94 01       	movw	r18, r8
 1a4:	99 0c       	add	r9, r9
 1a6:	44 0b       	sbc	r20, r20
 1a8:	55 0b       	sbc	r21, r21
 1aa:	2f 83       	std	Y+7, r18	; 0x07
 1ac:	38 87       	std	Y+8, r19	; 0x08
 1ae:	49 87       	std	Y+9, r20	; 0x09
 1b0:	5a 87       	std	Y+10, r21	; 0x0a
	int totalSteps = rotations * 10;
 1b2:	8c 01       	movw	r16, r24
 1b4:	00 0f       	add	r16, r16
 1b6:	11 1f       	adc	r17, r17
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	08 0f       	add	r16, r24
 1c6:	19 1f       	adc	r17, r25

	while (steps1 < totalSteps && steps2 < totalSteps) {
 1c8:	5c c0       	rjmp	.+184    	; 0x282 <controlMotors+0x138>
		unsigned long currentMicros1 = micros();
 1ca:	0e 94 84 00 	call	0x108	; 0x108 <micros>
 1ce:	6b 01       	movw	r12, r22
 1d0:	7c 01       	movw	r14, r24
		unsigned long currentMicros2 = micros();
 1d2:	0e 94 84 00 	call	0x108	; 0x108 <micros>

		if (currentMicros1 - previousMicros1 >= interval1) {
 1d6:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <previousMicros1>
 1da:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <previousMicros1+0x1>
 1de:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <previousMicros1+0x2>
 1e2:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <previousMicros1+0x3>
 1e6:	a7 01       	movw	r20, r14
 1e8:	96 01       	movw	r18, r12
 1ea:	28 19       	sub	r18, r8
 1ec:	39 09       	sbc	r19, r9
 1ee:	4a 09       	sbc	r20, r10
 1f0:	5b 09       	sbc	r21, r11
 1f2:	24 15       	cp	r18, r4
 1f4:	35 05       	cpc	r19, r5
 1f6:	46 05       	cpc	r20, r6
 1f8:	57 05       	cpc	r21, r7
 1fa:	b0 f0       	brcs	.+44     	; 0x228 <controlMotors+0xde>
			previousMicros1 = currentMicros1;
 1fc:	c0 92 24 01 	sts	0x0124, r12	; 0x800124 <previousMicros1>
 200:	d0 92 25 01 	sts	0x0125, r13	; 0x800125 <previousMicros1+0x1>
 204:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <previousMicros1+0x2>
 208:	f0 92 27 01 	sts	0x0127, r15	; 0x800127 <previousMicros1+0x3>
			PORTD ^= (1 << STEP_PIN1); // Toggle STEP_PIN1
 20c:	3b b1       	in	r19, 0x0b	; 11
 20e:	20 e2       	ldi	r18, 0x20	; 32
 210:	23 27       	eor	r18, r19
 212:	2b b9       	out	0x0b, r18	; 11
			steps1++;
 214:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <steps1>
 218:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <steps1+0x1>
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <steps1+0x1>
 224:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <steps1>
		}

		if (currentMicros2 - previousMicros2 >= interval2) {
 228:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <previousMicros2>
 22c:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <previousMicros2+0x1>
 230:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <previousMicros2+0x2>
 234:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <previousMicros2+0x3>
 238:	4b 01       	movw	r8, r22
 23a:	5c 01       	movw	r10, r24
 23c:	8c 18       	sub	r8, r12
 23e:	9d 08       	sbc	r9, r13
 240:	ae 08       	sbc	r10, r14
 242:	bf 08       	sbc	r11, r15
 244:	75 01       	movw	r14, r10
 246:	64 01       	movw	r12, r8
 248:	8f 80       	ldd	r8, Y+7	; 0x07
 24a:	98 84       	ldd	r9, Y+8	; 0x08
 24c:	a9 84       	ldd	r10, Y+9	; 0x09
 24e:	ba 84       	ldd	r11, Y+10	; 0x0a
 250:	c8 14       	cp	r12, r8
 252:	d9 04       	cpc	r13, r9
 254:	ea 04       	cpc	r14, r10
 256:	fb 04       	cpc	r15, r11
 258:	a0 f0       	brcs	.+40     	; 0x282 <controlMotors+0x138>
			previousMicros2 = currentMicros2;
 25a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <previousMicros2>
 25e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <previousMicros2+0x1>
 262:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <previousMicros2+0x2>
 266:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <previousMicros2+0x3>
			PORTD ^= (1 << STEP_PIN2); // Toggle STEP_PIN2
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	80 58       	subi	r24, 0x80	; 128
 26e:	8b b9       	out	0x0b, r24	; 11
			steps2++;
 270:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <steps2>
 274:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <steps2+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <steps2+0x1>
 27e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <steps2>

	unsigned long interval1 = del1; // Microseconds for motor 1
	unsigned long interval2 = del2; // Microseconds for motor 2
	int totalSteps = rotations * 10;

	while (steps1 < totalSteps && steps2 < totalSteps) {
 282:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <steps1>
 286:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <steps1+0x1>
 28a:	80 17       	cp	r24, r16
 28c:	91 07       	cpc	r25, r17
 28e:	44 f4       	brge	.+16     	; 0x2a0 <controlMotors+0x156>
 290:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <steps2>
 294:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <steps2+0x1>
 298:	80 17       	cp	r24, r16
 29a:	91 07       	cpc	r25, r17
 29c:	0c f4       	brge	.+2      	; 0x2a0 <controlMotors+0x156>
 29e:	95 cf       	rjmp	.-214    	; 0x1ca <controlMotors+0x80>
			previousMicros2 = currentMicros2;
			PORTD ^= (1 << STEP_PIN2); // Toggle STEP_PIN2
			steps2++;
		}
	}
}
 2a0:	2a 96       	adiw	r28, 0x0a	; 10
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	df 90       	pop	r13
 2ba:	cf 90       	pop	r12
 2bc:	bf 90       	pop	r11
 2be:	af 90       	pop	r10
 2c0:	9f 90       	pop	r9
 2c2:	8f 90       	pop	r8
 2c4:	7f 90       	pop	r7
 2c6:	6f 90       	pop	r6
 2c8:	5f 90       	pop	r5
 2ca:	4f 90       	pop	r4
 2cc:	08 95       	ret

000002ce <USART_Init>:

void USART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
 2ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 2d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2e2:	08 95       	ret

000002e4 <USART_Transmit>:
}

void USART_Transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 2e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e8:	95 ff       	sbrs	r25, 5
 2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <USART_Transmit>
	UDR0 = data;
 2ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f0:	08 95       	ret

000002f2 <USART_Receive>:
}

char USART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 2f2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f6:	88 23       	and	r24, r24
 2f8:	e4 f7       	brge	.-8      	; 0x2f2 <USART_Receive>
	return UDR0;
 2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 2fe:	08 95       	ret

00000300 <USART_ReceiveString>:

void USART_ReceiveString(char *buffer, int bufferLength) {
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	8c 01       	movw	r16, r24
 30e:	7b 01       	movw	r14, r22
	int i = 0;
 310:	c0 e0       	ldi	r28, 0x00	; 0
 312:	d0 e0       	ldi	r29, 0x00	; 0
	char receivedChar;
	while (i < bufferLength - 1) {
 314:	09 c0       	rjmp	.+18     	; 0x328 <USART_ReceiveString+0x28>
		receivedChar = USART_Receive();
 316:	0e 94 79 01 	call	0x2f2	; 0x2f2 <USART_Receive>
		if (receivedChar == '\n') {
 31a:	8a 30       	cpi	r24, 0x0A	; 10
 31c:	51 f0       	breq	.+20     	; 0x332 <USART_ReceiveString+0x32>
			break;
		}
		buffer[i++] = receivedChar;
 31e:	f8 01       	movw	r30, r16
 320:	ec 0f       	add	r30, r28
 322:	fd 1f       	adc	r31, r29
 324:	80 83       	st	Z, r24
 326:	21 96       	adiw	r28, 0x01	; 1
}

void USART_ReceiveString(char *buffer, int bufferLength) {
	int i = 0;
	char receivedChar;
	while (i < bufferLength - 1) {
 328:	c7 01       	movw	r24, r14
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	c8 17       	cp	r28, r24
 32e:	d9 07       	cpc	r29, r25
 330:	94 f3       	brlt	.-28     	; 0x316 <USART_ReceiveString+0x16>
		if (receivedChar == '\n') {
			break;
		}
		buffer[i++] = receivedChar;
	}
	buffer[i] = '\0';
 332:	c0 0f       	add	r28, r16
 334:	d1 1f       	adc	r29, r17
 336:	18 82       	st	Y, r1
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	08 95       	ret

00000346 <main>:
void USART_Transmit(char data);
char USART_Receive(void);
void USART_ReceiveString(char *buffer, int bufferLength);
void controlMotors(int rotations);

int main(void) {
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	64 97       	sbiw	r28, 0x14	; 20
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
	// Initialize USART
	USART_Init(103); // 9600 baud rate for 16 MHz clock
 35a:	87 e6       	ldi	r24, 0x67	; 103
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_Init>

	// Initialize motor control pins
	DDRD |= (1 << STEP_PIN1) | (1 << DIR_PIN1) | (1 << STEP_PIN2) | (1 << DIR_PIN2);
 362:	8a b1       	in	r24, 0x0a	; 10
 364:	80 6f       	ori	r24, 0xF0	; 240
 366:	8a b9       	out	0x0a, r24	; 10

	// Set initial direction for both motors
	PORTD &= ~(1 << DIR_PIN1);
 368:	8b b1       	in	r24, 0x0b	; 11
 36a:	8f 7e       	andi	r24, 0xEF	; 239
 36c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << DIR_PIN2);
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8f 7b       	andi	r24, 0xBF	; 191
 372:	8b b9       	out	0x0b, r24	; 11

	timer1_init(); // Initialize Timer1
 374:	0e 94 78 00 	call	0xf0	; 0xf0 <timer1_init>

	while (1) {
		// Read incoming data until a newline character is found
		char incomingData[20];
		USART_ReceiveString(incomingData, sizeof(incomingData));
 378:	64 e1       	ldi	r22, 0x14	; 20
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 80 01 	call	0x300	; 0x300 <USART_ReceiveString>

		// Find the comma separating fabric and length
		char *commaIndex = strchr(incomingData, ',');
 384:	6c e2       	ldi	r22, 0x2C	; 44
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 26 02 	call	0x44c	; 0x44c <strchr>
 390:	8c 01       	movw	r16, r24

		if (commaIndex != NULL) {
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	89 f3       	breq	.-30     	; 0x378 <main+0x32>
			// Extract fabric and length from the received data
			strncpy(receivedFabric, incomingData, commaIndex - incomingData);
 396:	be 01       	movw	r22, r28
 398:	6f 5f       	subi	r22, 0xFF	; 255
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	7c 01       	movw	r14, r24
 39e:	e6 1a       	sub	r14, r22
 3a0:	f7 0a       	sbc	r15, r23
 3a2:	a7 01       	movw	r20, r14
 3a4:	8e e0       	ldi	r24, 0x0E	; 14
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 31 02 	call	0x462	; 0x462 <strncpy>
			receivedFabric[commaIndex - incomingData] = '\0';
 3ac:	f7 01       	movw	r30, r14
 3ae:	e2 5f       	subi	r30, 0xF2	; 242
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	10 82       	st	Z, r1
			strncpy(receivedLength, commaIndex + 1, sizeof(receivedLength) - 1);
 3b4:	b8 01       	movw	r22, r16
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	49 e0       	ldi	r20, 0x09	; 9
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 31 02 	call	0x462	; 0x462 <strncpy>

			// Convert receivedLength to an integer
			int rotations = atoi(receivedLength);
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 08 02 	call	0x410	; 0x410 <atoi>

			// If the fabric or length is valid, proceed to motor control
			if (rotations > 0) {
 3ce:	18 16       	cp	r1, r24
 3d0:	19 06       	cpc	r1, r25
 3d2:	14 f4       	brge	.+4      	; 0x3d8 <main+0x92>
				controlMotors(rotations);
 3d4:	0e 94 a5 00 	call	0x14a	; 0x14a <controlMotors>
			}

			// Send acknowledgment to the sender Arduino
			USART_Transmit('T');
 3d8:	84 e5       	ldi	r24, 0x54	; 84
 3da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('h');
 3de:	88 e6       	ldi	r24, 0x68	; 104
 3e0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('a');
 3e4:	81 e6       	ldi	r24, 0x61	; 97
 3e6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('r');
 3ea:	82 e7       	ldi	r24, 0x72	; 114
 3ec:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('o');
 3f0:	8f e6       	ldi	r24, 0x6F	; 111
 3f2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('o');
 3f6:	8f e6       	ldi	r24, 0x6F	; 111
 3f8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('s');
 3fc:	83 e7       	ldi	r24, 0x73	; 115
 3fe:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('h');
 402:	88 e6       	ldi	r24, 0x68	; 104
 404:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
			USART_Transmit('a');
 408:	81 e6       	ldi	r24, 0x61	; 97
 40a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_Transmit>
		}
	}
 40e:	b4 cf       	rjmp	.-152    	; 0x378 <main+0x32>

00000410 <atoi>:
 410:	fc 01       	movw	r30, r24
 412:	88 27       	eor	r24, r24
 414:	99 27       	eor	r25, r25
 416:	e8 94       	clt
 418:	21 91       	ld	r18, Z+
 41a:	20 32       	cpi	r18, 0x20	; 32
 41c:	e9 f3       	breq	.-6      	; 0x418 <atoi+0x8>
 41e:	29 30       	cpi	r18, 0x09	; 9
 420:	10 f0       	brcs	.+4      	; 0x426 <atoi+0x16>
 422:	2e 30       	cpi	r18, 0x0E	; 14
 424:	c8 f3       	brcs	.-14     	; 0x418 <atoi+0x8>
 426:	2b 32       	cpi	r18, 0x2B	; 43
 428:	41 f0       	breq	.+16     	; 0x43a <atoi+0x2a>
 42a:	2d 32       	cpi	r18, 0x2D	; 45
 42c:	39 f4       	brne	.+14     	; 0x43c <atoi+0x2c>
 42e:	68 94       	set
 430:	04 c0       	rjmp	.+8      	; 0x43a <atoi+0x2a>
 432:	0e 94 40 02 	call	0x480	; 0x480 <__mulhi_const_10>
 436:	82 0f       	add	r24, r18
 438:	91 1d       	adc	r25, r1
 43a:	21 91       	ld	r18, Z+
 43c:	20 53       	subi	r18, 0x30	; 48
 43e:	2a 30       	cpi	r18, 0x0A	; 10
 440:	c0 f3       	brcs	.-16     	; 0x432 <atoi+0x22>
 442:	1e f4       	brtc	.+6      	; 0x44a <atoi+0x3a>
 444:	90 95       	com	r25
 446:	81 95       	neg	r24
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	08 95       	ret

0000044c <strchr>:
 44c:	fc 01       	movw	r30, r24
 44e:	81 91       	ld	r24, Z+
 450:	86 17       	cp	r24, r22
 452:	21 f0       	breq	.+8      	; 0x45c <strchr+0x10>
 454:	88 23       	and	r24, r24
 456:	d9 f7       	brne	.-10     	; 0x44e <strchr+0x2>
 458:	99 27       	eor	r25, r25
 45a:	08 95       	ret
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	cf 01       	movw	r24, r30
 460:	08 95       	ret

00000462 <strncpy>:
 462:	fb 01       	movw	r30, r22
 464:	dc 01       	movw	r26, r24
 466:	41 50       	subi	r20, 0x01	; 1
 468:	50 40       	sbci	r21, 0x00	; 0
 46a:	48 f0       	brcs	.+18     	; 0x47e <strncpy+0x1c>
 46c:	01 90       	ld	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	00 20       	and	r0, r0
 472:	c9 f7       	brne	.-14     	; 0x466 <strncpy+0x4>
 474:	01 c0       	rjmp	.+2      	; 0x478 <strncpy+0x16>
 476:	1d 92       	st	X+, r1
 478:	41 50       	subi	r20, 0x01	; 1
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	e0 f7       	brcc	.-8      	; 0x476 <strncpy+0x14>
 47e:	08 95       	ret

00000480 <__mulhi_const_10>:
 480:	7a e0       	ldi	r23, 0x0A	; 10
 482:	97 9f       	mul	r25, r23
 484:	90 2d       	mov	r25, r0
 486:	87 9f       	mul	r24, r23
 488:	80 2d       	mov	r24, r0
 48a:	91 0d       	add	r25, r1
 48c:	11 24       	eor	r1, r1
 48e:	08 95       	ret

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
